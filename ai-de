#!/usr/bin/env bash

#-------------------------------------------------------------------------------
# ai-de
# Installation de KDE5 ou OpenBox
#
# Ne fonctionne qu'avec la langue FR (fr_FR)
#
# Interface graphique avec dialog
#
# Run this script after your first boot with archlinux (as root)

source $(pwd)/ai-commons

    # 0 WELCOME {{{
    welcome() {
        local messages=""
        local titre="INSTALLATION DE KDE 5 OU OPENBOX"
        messages="\n"
        messages+="${BRcyan_dlg}!!!${Reset_dlg} Requis :\n"
        messages+="------------\n"
        messages+="Installation de Base de Archlinux\n"
        messages+="Lancer le script en ${Bwhite_dlg}ROOT${Reset_dlg}\n"
        messages+="Une connexion Internet fonctionnelle\n"
        messages+="Ne doit pas avoir été déjà lancé\n\n"
        messages+="${BRcyan_dlg}!!!${Reset_dlg} Infos :\n"
        messages+="-----------\n"
        messages+="Ne fonctionne qu'avec la langue ${Bwhite_dlg}FR (fr_FR)${Reset_dlg}\n"
        messages+="Peut être stoppé à tout moment avec ${Bwhite_dlg}CTRL+C${Reset_dlg}\n\n"
        messages+="Le type de clavier est de type : ${Bwhite_dlg}${TYPE_KEYBOARD}${Reset_dlg}\n\n"
        if (( $IN_VIRTUAL_BOX == 1 )); then
            messages+="Installation dans ${Bwhite_dlg}Oracle VM VirtualBox${Reset_dlg}\n"
        else
            messages+="Installation dans ${Bwhite_dlg}PC Réel${Reset_dlg}\n"
        fi
        if (( $IS_MULTI_BOOT_UEFI == 1 )); then
            messages+="Installation en ${Bwhite_dlg}Multi Boot UEFI (${NAME_DIR_ARCHLINUX})${Reset_dlg}"
        fi
        print_dialog_msgbox_h "${titre}" "${messages}" "Continuer" 26
    }
    #}}}
    # 1 CHECK ROOT {{{
    check_root() {
        if (( EUID != 0 )); then
            local messages=""
            local titre="REQUIS : ÉXÉCUTER LE SCRIPT EN ROOT"
            messages="\n"
            messages+="${BRred_dlg}/!\ ERREUR${Reset_dlg}\n"
            messages+="    L'utilisateur n'est pas ${Byellow_dlg}root${Reset_dlg}.\n"
            messages+="    ARRET immédiat."
            print_dialog_msgbox "${titre}" "${messages}" "OK"
            exit 1
        fi
    }
    #}}}
    # 2 CHECK NETWORK {{{
    check_network() {
        check_ping_ok() {
            ping -c 1 www.google.com &>/dev/null
            if (( $? != 0 )); then
                return 9
            fi
        }
        local messages=""
        local titre="REQUIS : CONNEXION INTERNET FONCTIONNELLE"
        messages="\n"
        check_ping_ok
        if (( $? != 0 )); then
            CURRENT_TYPE_IP="dhcpcd"
            ret_ping=9
            until (( ret_ping == 0 ));
                do
                    systemctl start $CURRENT_TYPE_IP.service
                    check_ping_ok
                    ret_ping=$?
            done
            messages+="Connexion à Internet réalisée avec succès.\n"
            print_dialog_msgbox "${titre}" "${messages}" "Continuer"
        else
            messages+="Connexion à Internet réalisée avec succès.\n"
            print_dialog_msgbox "${titre}" "${messages}" "Continuer"
        fi
    }
    #}}}
    # 3 CHECK DEJA LANCE {{{
    check_already_launched() {
        if [[ -f /root/ai-de.launched ]]; then
            local messages=""
            local titre="REQUIS : 1ÈRE ÉXÉCUTION DU SCRIPT"
            messages="\n"
            messages+="${BRred_dlg}/!\ ERREUR${Reset_dlg}\n"
            messages+="    Le script ${Byellow_dlg}ai-de${Reset_dlg} a déjà été lancé.\n"
            messages+="    ARRET immédiat."
            print_dialog_msgbox "${titre}" "${messages}" "OK"
            exit 1
        fi
    }
    #}}}
    # 4 CUSTOM REPOSITORIES {{{
    add_custom_repositories() {
        local retour=9
        local messages=""
        local titre="AJOUT REPOS À «/etc/pacman.conf»"
        messages="\n"
        if [[ $ARCHI == x86_64 ]]; then
            messages+="ARCH = ${Byellow_dlg}x86_64${Reset_dlg} : Ajout de ${BRwhite_dlg}Multilib${Reset_dlg}.\n"
        fi
        messages+="Ajout de ${BRwhite_dlg}archlinuxfr${Reset_dlg}.\n"
        messages+="Ajout de ${BRwhite_dlg}Xyne${Reset_dlg}.\n"
        print_dialog_msgbox "${titre}" "${messages}" "Continuer"
        # ENABLE MULTILIB REPOSITORY
        if [[ $ARCHI == x86_64 ]]; then
            multilib=$(grep -n "\[multilib\]" /etc/pacman.conf | cut -f1 -d:)
            if $multilib &> /dev/null; then
                echo -e "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
            else
                sed -i "${multilib}s/^#//" /etc/pacman.conf
                multilib=$(( $multilib + 1 ))
                sed -i "${multilib}s/^#//" /etc/pacman.conf
            fi
        fi
        # archlinuxf
        echo -e '\n[archlinuxfr]' >> /etc/pacman.conf
        echo -e 'SigLevel = Never' >> /etc/pacman.conf
        echo -e 'Server = http://repo.archlinux.fr/$arch' >> /etc/pacman.conf
        # Xyne : http://xyne.archlinux.ca/projects/
        if [[ $ARCHI == x86_64 ]]; then
            echo -e '\n[xyne-x86_64]' >> /etc/pacman.conf
            echo -e 'SigLevel = Required' >> /etc/pacman.conf
            echo -e 'Server = http://xyne.archlinux.ca/repos/xyne' >> /etc/pacman.conf
        else
            echo -e '\n[xyne-i686]' >> /etc/pacman.conf
            echo -e 'SigLevel = Required' >> /etc/pacman.conf
            echo -e 'Server = http://xyne.archlinux.ca/repos/xyne' >> /etc/pacman.conf
        fi
        #
        messages="\n"
        messages+="Visualiser/Éditer le fichier ${Byellow_dlg}/etc/pacman.conf${Reset_dlg} avec ${BRwhite_dlg}${EDITOR}${Reset_dlg} ?\n"
        print_dialog_yesno "${titre}" "${messages}" "Éditer" "Continuer"
        retour=$?
        if (( retour == 0 )); then
            ${EDITOR} /etc/pacman.conf
        fi
    }
    #}}}
    # 5 AI-DE LANCE 1 FOIS {{{
    set_launched() {
        echo "ai-de_launched=1" > /root/ai-de.launched
    }
    #}}}
    # 6 SYSTEM UPDATE {{{
    system_upgrade() {
        local messages=""
        local titre="MISE À JOUR DU SYSTÈME"
        messages="\n"
        messages+="Synchronise les nouveaux repos.\n"
        messages+="Met à jour le système.\n"
        print_dialog_msgbox "${titre}" "${messages}" "Continuer"
        printf '%s\n' "${BGreen}Synchronisation des nouveaux repos et mise à jour...${Reset}"
        pacman -Syyu
        pause_function
    }
    #}}}
    # 7 LANGUAGE SELECTOR {{{
    language_selector() {
        # LANGUE PAR DÉFAUT EN FR
        LANGUAGE=fr_FR
        #KDE5
        LANGUAGE_KDE5=fr
        #FIREFOX
        LANGUAGE_FF=fr
        #HUNSPELL
        LANGUAGE_HS=fr
        #ASPELL
        LANGUAGE_AS=fr
        #LIBREOFFICE
        LANGUAGE_LO=fr
        #
        local messages=""
        local titre="LANGUE PAR DÉFAUT"
        messages="\n"
        messages+="La langue par défaut est : ${Bwhite_dlg}${LANGUAGE}${Reset_dlg}\n"
        print_dialog_msgbox "${titre}" "${messages}" "Continuer"
    }
    #}}}
    # 8 CONFIGURE SUDO {{{
    configure_sudo() {
        local messages=""
        local titre="INSTALLATION ET CONFIGURATION DE SUDO"
        messages="\n"
        messages+="SUDO est un programme conçu pour permettre à un administrateur système de déléguer des privilèges à des utilisateurs.\n"
        print_dialog_msgbox "${titre}" "${messages}" "Continuer"
        if ! is_package_installed "sudo" ; then
            printf '%s\n' "${BGreen}Installation de ${BYellow}sudo${BGreen}...${Reset}"
            package_install "sudo"
        fi
        printf '%s\n' "${BGreen}Configuration du fichier ${BYellow}/etc/sudoers${BGreen}...${Reset}"
        ## Uncomment to allow members of group wheel to execute any command
        sed -i '/%wheel ALL=(ALL) ALL/s/^# //' /etc/sudoers
        ## Same thing without a password (not secure)
        #sed -i '/%wheel ALL=(ALL) NOPASSWD: ALL/s/^# //' /etc/sudoers
        pause_function
    }
    #}}}
    # 9 SELECT/CREATE USER {{{
    select_user() {
        local retour=9
        local messages=""
        local messages_chk=""
        local titre=""
        #CREATE NEW USER {{{
        create_new_user() {
            retour=9
            titre="CRÉATION NOUVEL UTILISATEUR"
            messages="\n"
            messages+="${BRcyan_dlg}!!!${Reset_dlg} Le nom de l'utilisateur doit être en minuscule et sans espace.\n"
            until (( retour == 0 ));
            do
                RETRY=$(dialog --colors --nocancel --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Valider" --inputbox "${messages}" 16 72 "jnd" 3>&1 1>&2 2>&3)
                if [[ ${RETRY} =~ " " || ${RETRY} == "" ]]; then
                    retour=9
                else
                    retour=0
                fi
            done
            USERNAME=$(echo ${RETRY} | tr '[:upper:]' '[:lower:]')
            UPPER_CASE_USERNAME=$(echo ${USERNAME} | tr "[:lower:]" "[:upper:]")
            printf '%s\n' "${BGreen}Création de l'utilisateur ${BYellow}${USERNAME}${BGreen} :${Reset}"
            useradd -m -g users -G wheel,sys -s /bin/bash ${USERNAME}
            retour=9
            titre="MOT DE PASSE UTILISATEUR"
            until (( retour == 0 ));
            do
                messages="\n"
                messages+="Entrer le mot de passe de l'utilisateur ${Byellow_dlg}${USERNAME}${Reset_dlg} :\n"
                messages+="${BRcyan_dlg}!!!${Reset_dlg} 7 caractères minimum et sans espace.\n"
                messages_chk="\n"
                messages_chk+="Confirmer le mot de passe de l'utilisateur ${Byellow_dlg}${USERNAME}${Reset_dlg} :\n"
                messages_chk+="${BRcyan_dlg}!!!${Reset_dlg} 7 caractères minimum et sans espace.\n"
                L_MDP=$(dialog --colors --insecure --nocancel --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Valider" --passwordbox "${messages}" 16 72 3>&1 1>&2 2>&3)
                L_MDP_CHK=$(dialog --colors --insecure --nocancel --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Valider" --passwordbox "${messages_chk}" 16 72 3>&1 1>&2 2>&3)
                if [[ ${#L_MDP} -lt 7 || ${#L_MDP_CHK} -lt 7 || ${L_MDP} =~ " " || ${L_MDP_CHK} =~ " " || ${L_MDP} != ${L_MDP_CHK} ]]; then
                    messages="\n"
                    messages+="${BRred_dlg}/!\ ERREUR${Reset_dlg}\n"
                    messages+="    Mot de passe pour ${Byellow_dlg}${USERNAME}${Reset_dlg} erroné.\n"
                    messages+="    Entrer de nouveau le mot de passe de ${Byellow_dlg}${USERNAME}${Reset_dlg}."
                    print_dialog_msgbox "${titre}" "${messages}" "Recommencer"
                    retour=9
                else
                    retour=0
                fi
            done
            #
            printf '%s\n' "${BGreen}Configuration du mot de passe de l'utilisateur ${BYellow}${USERNAME}${BGreen} :${Reset}"
            echo -e "${L_MDP}\n${L_MDP}" > /tmp/.passwd
            passwd ${USERNAME} < /tmp/.passwd
            rm -f /tmp/.passwd
#             # OU
#             echo -e "${L_MDP}\n${L_MDP}\n" | passwd ${USERNAME}
            pause_function
        } #}}}
        #CONFIGURE USER ACCOUNT {{{
        configure_user_account() {
            titre="CONFIGURATION DU COMPTE UTILISATEUR"
            messages="\n"
            messages+="Copie des fichiers de configuration de ${Byellow_dlg}bash${Reset_dlg} :\n"
            messages+="- .bash_profile\n"
            messages+="- .bashrc\n\n"
            messages+="Copie des fichiers de configuration de ${Byellow_dlg}fontconfig${Reset_dlg} :\n"
            messages+="- .config/fontconfig/fonts.conf\n\n"
            messages+="Création du répertoire ${Byellow_dlg}.compose-cache${Reset_dlg}\n\n"
            messages+="Création du répertoire ${Byellow_dlg}bin${Reset_dlg}\n\n"
            if (( $IS_UEFI == 1 )); then
                messages+="Copie des fichiers de configuration de ${Byellow_dlg}refind${Reset_dlg} :\n"
                if (( $IN_VIRTUAL_BOX == 0 )); then
                    messages+="- /boot/efi/EFI/refind/refind.conf\n"
                else
                    messages+="- /boot/efi/EFI/BOOT/refind.conf\n"
                fi
                messages+="- /boot/efi/EFI/${NAME_DIR_ARCHLINUX}/refind_linux.conf\n\n"
            fi
            messages+="Copie des fichiers utiles ${Byellow_dlg}00-CMD-....TXT${Reset_dlg} :\n"
            messages+="- 00-CMD-CUSTOMIZE-ARCH.TXT\n"
            messages+="- 00-CMD-INSTALLATION-LINUX-CK.TXT\n"
            print_dialog_msgbox_h "${titre}" "${messages}" "Continuer" 26
            #
            printf '%s\n' "${BGreen}Copie des fichiers de configuration de ${BYellow}bash${BGreen} dans le répertoire /home de ${BYellow}${USERNAME}${BGreen}...${Reset}"
            cp -v ai-fconfig/user-.bash_profile /home/${USERNAME}/.bash_profile
            cp -v ai-fconfig/user-.bashrc /home/${USERNAME}/.bashrc
            #
            printf '%s\n' "${BGreen}Copie des fichiers de configuration de ${BYellow}fontconfig${BGreen} dans le répertoire /home de ${BYellow}${USERNAME}${BGreen}...${Reset}"
            mkdir -p /home/${USERNAME}/.config/fontconfig
            cp -v ai-fconfig/user-.config-fontconfig-fonts.conf /home/${USERNAME}/.config/fontconfig/fonts.conf
            #
            printf '%s\n' "${BGreen}Création du répertoire ${BYellow}.compose-cache${BGreen} dans le répertoire /home de ${BYellow}${USERNAME}${BGreen}...${Reset}"
            mkdir -p /home/${USERNAME}/.compose-cache
            #
            printf '%s\n' "${BGreen}Création du répertoire ${BYellow}bin${BGreen} dans le répertoire /home de ${BYellow}${USERNAME}${BGreen}...${Reset}"
            mkdir -p /home/${USERNAME}/bin
            #
            printf '%s\n' "${BGreen}Copie des fichiers de configuration de ${BYellow}refind${BGreen} dans le répertoire /home de ${BYellow}${USERNAME}${BGreen}...${Reset}"
            # SI en UEFI : copie fichiers conf de refind
            if (( $IS_UEFI == 1 )); then
                mkdir -p /home/${USERNAME}/09-Fichiers-Conf/Refind-Fichiers-Conf
                if (( $IN_VIRTUAL_BOX == 0 )); then
                    cp -v /boot/efi/EFI/refind/refind.conf /home/${USERNAME}/09-Fichiers-Conf/Refind-Fichiers-Conf/refind.conf
                else
                    cp -v /boot/efi/EFI/BOOT/refind.conf /home/${USERNAME}/09-Fichiers-Conf/Refind-Fichiers-Conf/refind.conf
                fi
                cp -v /boot/efi/EFI/${NAME_DIR_ARCHLINUX}/refind_linux.conf /home/${USERNAME}/09-Fichiers-Conf/Refind-Fichiers-Conf/refind_linux.conf
            fi
            #
            printf '%s\n' "${BGreen}Copie des fichiers utiles ${BYellow}00-CMD-....TXT${BGreen} dans le répertoire /home de ${BYellow}${USERNAME}${BGreen}...${Reset}"
            cp -v ai-fconfig/00-CMD-CUSTOMIZE-ARCH.TXT /home/${USERNAME}/00-CMD-CUSTOMIZE-ARCH.TXT
            cp -v ai-fconfig/00-CMD-INSTALLATION-LINUX-CK.TXT /home/${USERNAME}/00-CMD-INSTALLATION-LINUX-CK.TXT
            pause_function
        } #}}}
        #CONFIGURE SUDO TIMESTAMP_TIMEOUT {{{
        configure_sudo_timestamp_timeout() {
            titre="CONFIGURATION DU COMPTE UTILISATEUR"
            messages="\n"
            messages+="Configuration de ${Byellow_dlg}/etc/sudoers${Reset_dlg} :\n"
            messages+="- timestamp_timeout = ${TIMESTAMP_TIMEOUT} minutes\n"
            print_dialog_msgbox "${titre}" "${messages}" "Continuer"
            printf '%s\n' "${BGreen}Modification de sudo : ${BYellow}timestamp_timeout = ${TIMESTAMP_TIMEOUT}${BGreen} minutes...${Reset}"
            echo -e '\n## My Defaults timestamp_timeout = '${TIMESTAMP_TIMEOUT}' minutes' >> /etc/sudoers
            echo -e 'Defaults:'"${USERNAME}"' timestamp_timeout='${TIMESTAMP_TIMEOUT}'' >> /etc/sudoers
            pause_function
        } #}}}
        create_new_user
        configure_user_account
        configure_sudo_timestamp_timeout
        chown -R ${USERNAME}:users /home/${USERNAME}
    }
    #}}}
    # 10 AUR HELPER {{{
    choose_aurhelper() {
        local retour=9
        local messages=""
        local titre=""
        titre="INSTALLATION DE «YAOURT»"
        messages="\n"
        messages+="Yaourt (Yet AnOther User Repository Tool) est un programme en ligne de commande qui interface les fonctions de ${Byellow_dlg}pacman${Reset_dlg} et ${Byellow_dlg}makepkg${Reset_dlg} pour la gestion des paquets.\n\n"
        messages+="${BRred_dlg}!!!${Reset_dlg} Yaourt n'est pas officiellement supporté par les développeurs d'Arch.\n"
        print_dialog_msgbox "${titre}" "${messages}" "Continuer"
        printf '%s\n' "${BGreen}Installation de ${BYellow}base-devel namcap yaourt git subversion${BGreen}...${Reset}"
        package_install "base-devel namcap yaourt git subversion"
        pause_function
        if ! is_package_installed "yaourt" ; then
            pacman -Syyuu
            package_install "base-devel namcap yaourt git subversion"
            pause_function
            if ! is_package_installed "yaourt" ; then
                messages="\n"
                messages+="${BRred_dlg}/!\ ERREUR${Reset_dlg}\n"
                messages+="    Installation de ${Byellow_dlg}Yaourt${Reset_dlg} impossible.\n"
                messages+="    ARRET immediat.\n"
                print_dialog_msgbox "${titre}" "${messages}" "OK"
                exit 1
            fi
        fi
        # Modif /etc/yaourtrc
        titre="CONFIGURATION DE «YAOURT»"
        messages="\n"
        messages+="Option #VISUAL : VISUAL=\"nano\"\n"
        local taille_tmp_en_ram=$(df -h -BM | awk '/\/tmp/ {print $2}' | sed -e "s/M//")
        if (( taille_tmp_en_ram < 2000 )); then
            messages+="Option #TMPDIR : TMPDIR=\"/home/${USERNAME}/yaourt_tmp\"\n"
        fi
        print_dialog_msgbox "${titre}" "${messages}" "Continuer"
        # Modif TMPDIR si taille /tmp < 2000M
        if (( taille_tmp_en_ram < 2000 )); then
            mkdir -p /home/${USERNAME}/yaourt_tmp
            chown -R ${USERNAME}:users /home/${USERNAME}/yaourt_tmp
            sed -i "/^#TMPDIR=/c\TMPDIR=\"/home/${USERNAME}/yaourt_tmp\"" /etc/yaourtrc
        fi
        # Modif VISUA="nano" par défaut
        sed -i "/^#VISUAL=/c\VISUAL=\"nano\"" /etc/yaourtrc
        #
        messages="\n"
        messages+="Visualiser/Éditer le fichier ${Byellow_dlg}/etc/yaourtrc${Reset_dlg} avec ${BRwhite_dlg}${EDITOR}${Reset_dlg} ?\n"
        print_dialog_yesno "${titre}" "${messages}" "Éditer" "Continuer"
        retour=$?
        if (( retour == 0 )); then
            ${EDITOR} /etc/yaourtrc
        fi
        AUR_HELPER="yaourt"
    }
    #}}}
    # 11 BASIC SETUP {{{
    install_basic_setup() {
        local retour=9
        local messages=""
        local titre=""
        # Masque les services non utilisés
        titre="SYSTEMD : MASQUER LES SERVICES NON UTILISÉS"
        messages="\n"
        messages+="Services non utilisés :\n"
        messages+="- auditd.service\n"
        messages+="- plymouth-start.service\n"
        messages+="- plymouth-quit-wait.service\n"
        messages+="- syslog.service\n"
        print_dialog_msgbox "${titre}" "${messages}" "Masquer"
        printf '%s\n' "${BGreen}Masque les services non utilisés...${Reset}"
        systemctl mask auditd.service plymouth-start.service plymouth-quit-wait.service syslog.service
        pause_function
        # Activation de Systemd-timesyncd
        if (( $IN_VIRTUAL_BOX == 0 )); then
            titre="SYSTEMD : ACTIVATION DE «SYSTEMD-TIMESYNCD»"
            messages="\n"
            messages+="Systemd-timesyncd est un service qui permet de synchroniser l'horloge du système à travers le réseau.\n"
            print_dialog_yesno "${titre}" "${messages}" "Activer" "Continuer"
            retour=$?
            if (( retour == 0 )); then
                printf '%s\n' "${BGreen}Configuration de ${BYellow}systemd-timesyncd${BGreen}...${Reset}"
                mkdir -p /etc/systemd/timesyncd.conf.d
                echo "# Reglages personnel de systemd-timesyncd." > /etc/systemd/timesyncd.conf.d/my_timesyncd_conf.conf
                echo "[Time]" >> /etc/systemd/timesyncd.conf.d/my_timesyncd_conf.conf
                echo "NTP=0.fr.pool.ntp.org 1.fr.pool.ntp.org 2.fr.pool.ntp.org 3.fr.pool.ntp.org" >> /etc/systemd/timesyncd.conf.d/my_timesyncd_conf.conf
                echo "FallbackNTP=0.arch.pool.ntp.org 1.arch.pool.ntp.org 2.arch.pool.ntp.org 3.arch.pool.ntp.org" >> /etc/systemd/timesyncd.conf.d/my_timesyncd_conf.conf
                printf '%s\n' "${BGreen}Activation de ${BYellow}systemd-timesyncd.service${BGreen}...${Reset}"
                systemctl enable systemd-timesyncd.service
                pause_function
            fi
        fi
        # Configuration de systemd-journal
        titre="SYSTEMD : CONFIGURATION DE «SYSTEMD-JOURNAL»"
        messages="\n"
        messages+="Ajout de ${Byellow_dlg}${USERNAME}${Reset_dlg} au groupe ${Byellow_dlg}systemd-journal${Reset_dlg}.\n\n"
        messages+="Configuration de systemd-journal :\n"
        messages+="- Option MaxUse = 50M.\n"
        messages+="- Option MaxFileSize = 10M.\n"
        print_dialog_msgbox "${titre}" "${messages}" "Continuer"
        printf '%s\n' "${BGreen}Ajout de ${BYellow}${USERNAME}${BGreen} au groupe ${BYellow}systemd-journal${BGreen}...${Reset}"
        gpasswd -a ${USERNAME} systemd-journal
        printf '%s\n' "${BGreen}Configuration de ${BYellow}systemd-journal${BGreen} : ${BYellow}MaxUse=50M${BGreen} et ${BYellow}MaxFileSize=10M${BGreen}...${Reset}"
        mkdir -p /etc/systemd/journald.conf.d
        echo "# Reglages personnel de systemd-journal." > /etc/systemd/journald.conf.d/my_journald_conf.conf
        echo "[Journal]" >> /etc/systemd/journald.conf.d/my_journald_conf.conf
        echo "SystemMaxUse=50M" >> /etc/systemd/journald.conf.d/my_journald_conf.conf
        echo "SystemMaxFileSize=10M" >> /etc/systemd/journald.conf.d/my_journald_conf.conf
        pause_function
        # Installation de cronie. Remplacé par systemd-timer
        titre="INSTALLATION ET ACTIVATION DE «CRONIE»"
        messages="\n"
        messages+="Cronie est un service de planification qui permet l'exécution de commandes de manière périodique.\n\n"
        messages+="${BRcyan_dlg}!!!${Reset_dlg} Peu utile car remplacé par ${Byellow_dlg}systemd-timer${Reset_dlg}.\n"
        print_dialog_yesno_no "${titre}" "${messages}" "Installer" "Continuer"
        retour=$?
        if (( retour == 0 )); then
            printf '%s\n' "${BGreen}Installation de ${BYellow}cronie${BGreen}...${Reset}"
            package_install "cronie"
            printf '%s\n' "${BGreen}Activation de ${BYellow}cronie.service${BGreen}...${Reset}"
            systemctl enable cronie.service
            pause_function
        fi
        #
        titre="INSTALLATION D'OUTILS BASH"
        messages="\n"
        messages+="Installation de divers outils ${Byellow_dlg}BASH${Reset_dlg} :\n"
        messages+="bc mlocate rsync bash-completion wget net-tools tree atool mc iptraf-ng\n"
        print_dialog_msgbox "${titre}" "${messages}" "Installer"
        printf '%s\n' "${BGreen}Installation de ${BYellow}bc mlocate rsync bash-completion wget net-tools tree atool mc iptraf-ng${BGreen}...${Reset}"
        package_install "bc mlocate rsync bash-completion wget net-tools tree atool mc iptraf-ng"
        pause_function
        #
        titre="INSTALLATION DE «D-BUS»"
        messages="\n"
        messages+="D-Bus est un système de bus de messages qui fournit un mécanisme facilitant la communication inter-processus.\n"
        print_dialog_msgbox "${titre}" "${messages}" "Installer"
        printf '%s\n' "${BGreen}Installation de ${BYellow}dbus python2-dbus${BGreen}...${Reset}"
        package_install "dbus python2-dbus"
        pacman -D --asdeps python2-dbus
        pause_function
        #
        titre="INSTALLATION DES OUTILS DE (DÉ)COMPRESSION"
        messages="\n"
        messages+="Installation de divers outils de (dé)compression :\n"
        messages+="zip unzip unrar p7zip\n"
        print_dialog_msgbox "${titre}" "${messages}" "Installer"
        printf '%s\n' "${BGreen}Installation de ${BYellow}zip unzip unrar p7zip${BGreen}...${Reset}"
        package_install "zip unzip unrar p7zip"
#        aur_package_install "rar"
        pause_function
        #
        titre="INSTALLATION DE «AVAHI»"
        messages="\n"
        messages+="Avahi est une mise en oeuvre des protocoles Zeroconf.\n"
        print_dialog_msgbox "${titre}" "${messages}" "Installer"
        printf '%s\n' "${BGreen}Installation de ${BYellow}avahi nss-mdns${BGreen}...${Reset}"
        package_install "avahi nss-mdns"
        pause_function
        titre="ACTIVATION DE «AVAHI»"
        messages="\n"
        messages+="${BRcyan_dlg}!!!${Reset_dlg} Activer avahi est recommandé pour ${Byellow_dlg}CUPS${Reset_dlg}.\n"
        print_dialog_yesno_no "${titre}" "${messages}" "Activer" "Continuer"
        retour=$?
        if (( retour == 0 )); then
            printf '%s\n' "${BGreen}Activation de ${BYellow}avahi-daemon.service${BGreen}...${Reset}"
            is_package_installed "avahi" && systemctl enable avahi-daemon.service
            printf '%s\n' "${BGreen}Activation de ${BYellow}avahi-dnsconfd.service${BGreen}...${Reset}"
            is_package_installed "avahi" && systemctl enable avahi-dnsconfd.service
            pause_function
        fi
        #
        titre="INSTALLATION DE «ACPI» ET ACTIVATION DE «ACPID»"
        messages="\n"
        messages+="Acpid est un démon flexible et extensible pour délivrer des évènements ACPI.\n\n"
        messages+="${BRcyan_dlg}!!!${Reset_dlg} Activer acpid est recommandé pour un Ordinateur Portable.\n"
        print_dialog_yesno_no "${titre}" "${messages}" "Activer" "Continuer"
        retour=$?
        if (( retour == 0 )); then
            printf '%s\n' "${BGreen}Installation de ${BYellow}acpi acpid${BGreen}...${Reset}"
            package_install "acpi acpid"
            printf '%s\n' "${BGreen}Activation de ${BYellow}acpid.service${BGreen}...${Reset}"
            is_package_installed "acpid" && systemctl enable acpid.service
            pause_function
        fi
        #
        titre="INSTALLATION DE «ALSA»"
        messages="\n"
        messages+="ALSA (Advanced Linux Sound Architecture) est un composant du noyau Linux qui gère le support des cartes SON.\n"
        print_dialog_msgbox "${titre}" "${messages}" "Installer"
        printf '%s\n' "${BGreen}Installation de ${BYellow}alsa-utils${BGreen}...${Reset}"
        package_install "alsa-utils"
        pause_function
        titre="ALSA : ACTIVATION DES CANAUX"
        messages="\n"
        messages+="${BRcyan_dlg}!!!${Reset_dlg} Activer les canaux PCM, Master et Front.\n"
        messages+="    Touche [M] : MM --> 00\n"
        messages+="${BRcyan_dlg}!!!${Reset_dlg} Régler le volume.\n"
        print_dialog_yesno "${titre}" "${messages}" "Activer" "Continuer"
        retour=$?
        if (( retour == 0 )); then
            alsamixer
            titre="ALSA : TEST DU SON"
            messages="\n"
            messages+="Test du son avec ${Byellow_dlg}speaker-test${Reset_dlg}\n"
            print_dialog_msgbox "${titre}" "${messages}" "Tester"
            printf '%s\n' "${BGreen}Test du son avec ${BYellow}speaker-test${BGreen}...${Reset}"
            speaker-test -c 2 -l 2
            alsactl store
        fi
        pause_function
        #
        titre="INSTALLATION DE «NTFS/FAT/exFAT»"
        messages="\n"
        messages+="Système de fichiers permettant d'organiser les données devant être conservées, ainsi que de gérer l'espace disponible sur le(s) périphérique(s) qui les contient.\n"
        print_dialog_msgbox "${titre}" "${messages}" "Installer"
        printf '%s\n' "${BGreen}Installation de ${BYellow}ntfs-3g dosfstools exfat-utils fuse autofs${BGreen}...${Reset}"
        package_install "ntfs-3g dosfstools exfat-utils fuse autofs"
        pause_function
    }
    #}}}
    # 12 XORG {{{
    install_xorg() {
        local messages=""
        local titre=""
        titre="INSTALLATION DE XORG"
        messages="\n"
        messages+="Xorg est l'implémentation officielle du système graphique X Window System version 11.\n\n"
        messages+="Installion de X-Server (requis pour Environement de Bureau, Pilotes GPU, Agencement Clavier, ...).\n"
        print_dialog_msgbox "${titre}" "${messages}" "Installer"
        printf '%s\n' "${BGreen}Installation de ${BYellow}xorg-server xorg-server-utils xorg-xinit xorg-utils xorg-xkill xorg-twm xorg-xclock xterm${BGreen}...${Reset}"
        package_install "xorg-server xorg-server-utils xorg-xinit xorg-utils xorg-xkill xorg-twm xorg-xclock xterm"
#         printf '%s\n' "${BGreen}Installation de ${BYellow}xf86-input-synaptics xf86-input-mouse xf86-input-keyboard${BGreen}...${Reset}"
#         package_install "xf86-input-synaptics xf86-input-mouse xf86-input-keyboard"
        printf '%s\n' "${BGreen}Installation de ${BYellow}mesa gamin${BGreen}...${Reset}"
        package_install "mesa gamin"
        pause_function
        #CONFIGURE AZERTY OR BEPO KEYBOARD IN XORG
        titre="CONFIGURATION DU TYPE DE CLAVIER"
        messages="\n"
        messages+="Le type de clavier est de type : ${BRwhite_dlg}${TYPE_KEYBOARD}${Reset_dlg}\n"
        print_dialog_msgbox "${titre}" "${messages}" "Continuer"
        printf '%s\n' "${BGreen}Mise en place de la disposition du clavier en FR ${BYellow}${TYPE_KEYBOARD}${BGreen}...${Reset}"
        if [[ $TYPE_KEYBOARD == "BEPO" ]]; then
            cp -v ai-fconfig/10-keyboard-layout-BEPO.conf /etc/X11/xorg.conf.d/10-keyboard-layout.conf
        else
            cp -v ai-fconfig/10-keyboard-layout-AZERTY.conf /etc/X11/xorg.conf.d/10-keyboard-layout.conf
        fi
        pause_function
    }
    #}}}
    # 13 FONT CONFIGURATION PRESETS {{{
    configure_font_presets() {
        local messages=""
        local titre=""
        titre="OUTIL DE CONFIGURATION DES POLICES DE CARACTÈRES"
        messages="\n"
        messages+="${Byellow_dlg}Fontconfig${Reset_dlg} est une bibliothèque conçue pour fournir une liste des polices disponibles aux applications, et pour configurer la façon dont les polices seront rendues.\n\n"
        print_dialog_msgbox "${titre}" "${messages}" "Installer"
        printf '%s\n' "${BGreen}Installation de ${BYellow}cairo fontconfig freetype2 libxft${BGreen}...${Reset}"
        package_install "cairo fontconfig freetype2 libxft"
        pause_function
    }
    #}}}
    # 14 VIDEO CARDS {{{
    install_video_cards() {
        local retour=9
        local messages=""
        local titre=""
        titre="INSTALLATION DES PILOTES DE LA CARTE VIDÉO"
        messages="\n"
        if (( $IN_VIRTUAL_BOX == 1 )); then
            messages+="Installation dans ${BRwhite_dlg}Oracle VM Virtualbox${Reset_dlg}.\n\n"
            messages+="Installation de virtualbox-guest-utils.\n"
            print_dialog_msgbox "${titre}" "${messages}" "Installer"
            printf '%s\n' "${BGreen}Installation de ${BYellow}linux-headers virtualbox-guest-utils mesa-libgl${BGreen}...${Reset}"
            package_install "linux-headers virtualbox-guest-utils mesa-libgl"
            printf '%s\n' "${BGreen}Démarrage des modules ${BYellow}vboxguest vboxsf vboxvideo${BGreen}...${Reset}"
# !!! INUTILE DEPUIS VERSION 5.0.16 et virtualbox-host-dkms
#             echo "# Load vbox modules guest at boot" > /etc/modules-load.d/vbox_modules_guest.conf
#             echo "vboxguest" >> /etc/modules-load.d/vbox_modules_guest.conf
#             echo "vboxsf" >> /etc/modules-load.d/vbox_modules_guest.conf
#             echo "vboxvideo" >> /etc/modules-load.d/vbox_modules_guest.conf
            # !!! VOIR UTILITÉ
            start_module "vboxguest"
            start_module "vboxsf"
            start_module "vboxvideo"
            printf '%s\n' "${BGreen}Ajout de ${BYellow}${USERNAME}${BGreen} au groupe ${BYellow}vboxsf${BGreen}...${Reset}"
            gpasswd -a ${USERNAME} vboxsf
        else
            _vga=$(lspci | grep VGA | tr "[:upper:]" "[:lower:]")
            _vga_length=$(lspci | grep VGA | wc -l)
            # test si bumblebee
            if [[ $_vga_length -eq 2 ]] && [[ -n $(echo ${_vga} | grep "nvidia") || -f /sys/kernel/debug/dri/0/vbios.rom ]]; then
                messages+="Installation sur Portable avec technologie ${BRwhite_dlg}NVidia Optimus${Reset_dlg}.\n\n"
                messages+="Installation de xf86-video-intel bumblebee nvidia.\n"
                print_dialog_msgbox "${titre}" "${messages}" "Installer"
                L_XF86_DRIVERS=$(pacman -Qe | grep xf86-video | awk '{print $1}')
                printf '%s\n' "${BGreen}Désinstallation de ${BYellow}$L_XF86_DRIVERS${BGreen}...${Reset}"
                [[ -n $L_XF86_DRIVERS ]] && pacman -Rcsn $L_XF86_DRIVERS
                printf '%s\n' "${BGreen}Installation de ${BYellow}xf86-video-intel bumblebee nvidia${BGreen}...${Reset}"
                package_install "xf86-video-intel bumblebee nvidia"
                printf '%s\n' "${BGreen}Ajout de ${BYellow}${USERNAME}${BGreen} au groupe ${BYellow}bumblebee${BGreen}...${Reset}"
                gpasswd -a ${USERNAME} bumblebee
            # test si NVidia
            elif [[ -n $(echo ${_vga} | grep "nvidia") || -f /sys/kernel/debug/dri/0/vbios.rom ]]; then
                # NOM DE LA CARTE
                L_NAME_CG_NVIDIA=$(lspci | grep -E "VGA" | sed -e "s/^.*\[//;s/\].*$//")
                messages+="Carte Vidéo ${BRwhite_dlg}NVidia ${L_NAME_CG_NVIDIA}${Reset_dlg} détectée.\n\n"
                messages+="Installer le pilote vidéo propriétaire NVidia ?\n"
                print_dialog_yesno "${titre}" "${messages}" "Installer" "Continuer"
                retour=$?
                if (( retour == 0 )); then
                    L_XF86_DRIVERS=$(pacman -Qe | grep xf86-video | awk '{print $1}')
                    printf '%s\n' "${BGreen}Désinstallation de ${BYellow}$L_XF86_DRIVERS${BGreen}...${Reset}"
                    [[ -n $L_XF86_DRIVERS ]] && pacman -Rcsn $L_XF86_DRIVERS
                    # Si PC Cervon
                    if [[ "${L_NAME_CG_NVIDIA}" == "GeForce 9800 GTX+" ]]; then
                        messages="\n"
                        messages+="Nom de la carte NVidia détectée : ${Byellow_dlg}${L_NAME_CG_NVIDIA}${Reset_dlg}\n\n"
                        messages+="Installation de la branche 340xx des pilotes NVidia pour les GPUs G8x, G9x et GT2xx.\n"
                        print_dialog_msgbox "${titre}" "${messages}" "Installer"
                        printf '%s\n' "${BGreen}Installation de ${BYellow}nvidia-340xx nvidia-340xx-utils nvidia-340xx-libgl pangox-compat libva-vdpau-driver${BGreen}...${Reset}"
                        package_install "nvidia-340xx nvidia-340xx-utils nvidia-340xx-libgl pangox-compat libva-vdpau-driver"
                        #CONFIGURE NVidia IN XORG
                        printf '%s\n' "${BGreen}Mise en place des réglages pour Xorg de la carte nVidia ${BYellow}20-nvidia.conf${BGreen}...${Reset}"
                        cp -v ai-fconfig/20-nvidia-340xx.conf /etc/X11/xorg.conf.d/20-nvidia.conf
                    # Si PC récent
                    else
                        messages="\n"
                        messages+="Nom de la carte Vidéo NVidia détectée : ${Byellow_dlg}${L_NAME_CG_NVIDIA}${Reset_dlg}\n\n"
                        messages+="Installation de la dernière version des pilotes NVidia.\n"
                        print_dialog_msgbox "${titre}" "${messages}" "Installer"
                        printf '%s\n' "${BGreen}Installation de ${BYellow}nvidia nvidia-utils nvidia-libgl nvidia-settings pangox-compat libva-vdpau-driver${BGreen}...${Reset}"
                        package_install "nvidia nvidia-utils nvidia-libgl nvidia-settings pangox-compat libva-vdpau-driver"
                        #CONFIGURE NVidia IN XORG
                        printf '%s\n' "${BGreen}Mise en place des réglages pour Xorg de la carte nVidia ${BYellow}20-nvidia.conf${BGreen}...${Reset}"
                        cp -v ai-fconfig/20-nvidia.conf /etc/X11/xorg.conf.d/20-nvidia.conf                    
                    fi
                    sed -i "s/NAMECGNVIDIA/${L_NAME_CG_NVIDIA}/" /etc/X11/xorg.conf.d/20-nvidia.conf
                    retour=9
                    titre="INSTALLATION DES PILOTES NVIDIA"
                    messages="\n"
                    messages+="Visualiser/Éditer le fichier ${Byellow_dlg}20-nvidia.conf${Reset_dlg} avec ${BRwhite_dlg}${EDITOR}${Reset_dlg} ?\n"
                    print_dialog_yesno "${titre}" "${messages}" "Editer" "Continuer"
                    retour=$?
                    if (( retour == 0 )); then
                        nano /etc/X11/xorg.conf.d/20-nvidia.conf
                    fi
                else
                    messages="\n"
                    messages+="Nom de la carte NVidia détectée : ${Byellow_dlg}${L_NAME_CG_NVIDIA}${Reset_dlg}\n\n"
                    messages+="Installation du pilote libre ${Byellow_dlg}nouveau${Reset_dlg}.\n"
                    print_dialog_msgbox "${titre}" "${messages}" "Installer"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}mesa-libgl xf86-video-nouveau${BGreen}...${Reset}"
                    package_install "mesa-libgl xf86-video-nouveau"
                    printf '%s\n' "${BGreen}Démarrage du module ${BYellow}nouveau${BGreen}...${Reset}"
                    add_module "nouveau"
                fi
            # test si intel
            elif [[ -n $(echo ${_vga} | grep "intel corporation") || -f /sys/kernel/debug/dri/0/i915_capabilities ]]; then
                messages+="Carte Vidéo ${BRwhite_dlg}INTEL${Reset_dlg} détectée.\n\n"
                messages+="Installation du pilote libre ${Byellow_dlg}intel${Reset_dlg}.\n"
                print_dialog_msgbox "${titre}" "${messages}" "Installer"
                printf '%s\n' "${BGreen}Installation de ${BYellow}mesa-libgl xf86-video-intel libva-intel-driver${BGreen}...${Reset}"
                package_install "mesa-libgl xf86-video-intel libva-intel-driver"
            # test si ATI/AMD
            elif [[ -n $(echo ${_vga} | grep "advanced micro devices") || -f /sys/kernel/debug/dri/0/radeon_pm_info || -f /sys/kernel/debug/dri/0/radeon_sa_info ]]; then
                messages+="Carte Vidéo ${BRwhite_dlg}ATI${Reset_dlg} détectée.\n\n"
                messages+="Installation du pilote libre ${Byellow_dlg}ati${Reset_dlg}.\n"
                print_dialog_msgbox "${titre}" "${messages}" "Installer"
                printf '%s\n' "${BGreen}Installation de ${BYellow}mesa-libgl xf86-video-ati${BGreen}...${Reset}"
                package_install "mesa-libgl xf86-video-ati"
                printf '%s\n' "${BGreen}Démarrage des modules ${BYellow}radeon ati${BGreen}...${Reset}"
                add_module "radeon"
                add_module "ati"
            # VESA PAR DEFAUT
            else
                messages+="Aucune Carte Vidéo détectée.\n\n"
                messages+="Installation du pilote ${Byellow_dlg}Vesa${Reset_dlg} par défaut.\n"
                print_dialog_msgbox "${titre}" "${messages}" "Installer"
                printf '%s\n' "${BGreen}Installation de ${BYellow}mesa-libgl xf86-video-ati${BGreen}...${Reset}"
                package_install "mesa-libgl xf86-video-vesa"
            fi
        fi
        pause_function
    }
    #}}}
    #15 CUPS {{{
    install_cups() {
        local retour=9
        local messages=""
        local titre=""
        titre="INSTALLATION DE CUPS (Common Unix Printing System)"
        messages="\n"
        messages+="CUPS est le système d'impression opensource basé sur des normes et développé par Apple Inc pour OS®X et autres systèmes d'exploitation UNIX®-like.\n"
        print_dialog_yesno_no "${titre}" "${messages}" "Installer" "Continuer"
        retour=$?
        if (( retour == 0 )); then
            printf '%s\n' "${BGreen}Installation de ${BYellow}cups cups-filters ghostscript gsfonts${BGreen}...${Reset}"
            package_install "cups cups-filters ghostscript gsfonts"
            printf '%s\n' "${BGreen}Installation de ${BYellow}gutenprint foomatic-db foomatic-db-engine foomatic-db-nonfree foomatic-filters hplip splix cups-pdf${BGreen}...${Reset}"
            package_install "gutenprint foomatic-db foomatic-db-engine foomatic-db-nonfree foomatic-filters hplip splix cups-pdf"
            printf '%s\n' "${BGreen}Activation de ${BYellow}org.cups.cupsd.service${BGreen}...${Reset}"
            systemctl enable org.cups.cupsd.service
            local status=$(systemctl status avahi-daemon.service | awk '/Active/ {print $2}')
            if [[ "${status}" == "inactive" ]];then
                printf '%s\n' "${BGreen}Activation de ${BYellow}avahi-daemon.service${BGreen}...${Reset}"
                is_package_installed "avahi" && systemctl enable avahi-daemon.service
            fi
            status=$(systemctl status avahi-dnsconfd.service | awk '/Active/ {print $2}')
            if [[ "${status}" == "inactive" ]];then
                printf '%s\n' "${BGreen}Activation de ${BYellow}avahi-dnsconfd.service${BGreen}...${Reset}"
                is_package_installed "avahi" && systemctl enable avahi-dnsconfd.service
            fi
            pause_function
        fi
    }
    #}}}

#
# Install DE OU WM
#

    # 40 FONTS {{{
    install_fonts() {
        local retour=9
        local messages=""
        local titre="INSTALLATION DE POLICES SUPPLÉMENTAIRES"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 18 72 4)
            options=("ttf-google-fonts-git" "(Polices TrueType de Google) - (AUR)" OFF
                    "ttf-inconsolata" "(Police Monospace)" OFF
                    "noto-fonts" "(Polices TTF Google Noto)" OFF
                    "noto-fonts-emoji" "(Polices TTF emoji Google Noto)" OFF
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "ttf-google-fonts-git")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}ttf-google-fonts-git${BGreen}...${Reset}"
                    aur_package_install "ttf-google-fonts-git"
                    ;;
                "ttf-inconsolata")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}ttf-inconsolata${BGreen}...${Reset}"
                    package_install "ttf-inconsolata"
                    ;;
                "noto-fonts")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}noto-fonts${BGreen}...${Reset}"
                    package_install "noto-fonts"
                    ;;
                "noto-fonts-emoji")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}noto-fonts-emoji${BGreen}...${Reset}"
                    package_install "noto-fonts-emoji"
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
    # 94 INSTALL OPTIONAL DEP FOR GTK3 SI INSTALLÉ {{{
    install_optional_dep_for_gtk3() {
        local messages=""
        local titre=""
        if is_package_installed "gtk3" ; then
            titre="INSTALLATION DES DÉPENDANCES OPTIONNELLES POUR GTK3"
            messages=" \n"
            messages+="Installation de ${Byellow_dlg}gtk3-print-backends${Reset_dlg}: Print backends for GTK3.\n"
            print_dialog_msgbox "${titre}" "${messages}" "Installer"
            printf '%s\n' "${BGreen}Installation de ${BYellow}gtk3-print-backends${BGreen}...${Reset}"
            package_install "gtk3-print-backends"
            pause_function
        fi
    }
    #}}}
    # 95 INSTALL OPTIONAL DEP FOR QT4 SI INSTALLÉ {{{
    install_optional_dep_for_qt4() {
        local messages=""
        local titre=""
        if is_package_installed "qt4" ; then
            titre="INSTALLATION DES DÉPENDANCES OPTIONNELLES POUR QT4"
            messages=" \n"
            messages+="Installation de ${Byellow_dlg}sni-qt${Reset_dlg}: StatusNotifierItem (AppIndicators) support.\n"
            messages+="Installation de ${Byellow_dlg}icu${Reset_dlg}.\n"
            print_dialog_msgbox "${titre}" "${messages}" "Installer"
            printf '%s\n' "${BGreen}Installation de ${BYellow}sni-qt icu${BGreen}...${Reset}"
            package_install "sni-qt icu"
            pacman -D --asdeps sni-qt
            pause_function
        fi
    }
    #}}}
    # 96 CLEAN ORPHAN PACKAGES {{{
    clean_orphan_packages() {
        local retour=9
        local messages=""
        local titre="SUPPRESSION DES PAQUETS ORPHELINS"
        local liste_pkg=$(pacman -Qqdt)
        messages=" \n"
        messages+="Supprimer les paquets suivants : ${Byellow_dlg}${liste_pkg}${Reset_dlg} ?\n"
        print_dialog_yesno_no "${titre}" "${messages}" "Supprimer" "Continuer"
        retour=$?
        if (( retour == 0 )); then
            printf '%s\n' "${BGreen}Suppression des paquets ${BYellow}${liste_pkg}${BGreen}...${Reset}"
            pacman -Rsc $(pacman -Qqdt)
            pause_function
        fi
    }
    #}}}
    # 97 MAJ MANDB {{{
    update_mandb() {
        local retour=9
        local messages=""
        local titre="GÉNÉRATION DU CACHE DE «man»"
        messages=" \n"
        messages+="Générer ou mettre à jour le cache de ${Byellow_dlg}man${Reset_dlg} (prend qque minutes) ?\n"
        print_dialog_yesno "${titre}" "${messages}" "Générer" "Continuer"
        retour=$?
        if (( retour == 0 )); then
            printf '%s\n' "${BGreen}Génération ou mise à jour du cache de ${BYellow}man${BGreen}...${Reset}"
            /usr/bin/mandb --quiet
            pause_function
        fi
    }
    #}}}
    # 98 CLEAN CACHE PACMAN {{{
    clean_cache_pacman() {
        local messages=""
        local titre="NETTOYAGE ET OPTIMISATION DU CACHE DE PACMAN"
        messages=" \n"
        messages+="Nettoyage du répertoire ${Byellow_dlg}/var/cache/pacman/pkg${Reset_dlg}.\n"
        print_dialog_msgbox "${titre}" "${messages}" "Nettoyer"
        printf '%s\n' "${BGreen}Nettoyage du répertoire ${BYellow}/var/cache/pacman/pkg${BGreen}...${Reset}"
        pacman -Sc
        pacman-optimize
        if is_package_installed "pkgfile" ; then
            printf '%s\n' "${BGreen}Génération ou mise à jour du cache de ${BYellow}pkgfile${BGreen}...${Reset}"
            pkgfile --update
            printf '%s\n' "${BGreen}Activation du service ${BYellow}pkgfile-update.timer${BGreen}...${Reset}"
            systemctl enable pkgfile-update.timer
        fi
        pause_function
    }
    #}}}
    # 99 FINISH {{{
    finish() {
        local retour=9
        local messages=""
        local titre=""
        titre="PAQUETS INSTALLÉS DEPUIS AUR"
        messages=" \n"
        messages+="Visualiser la liste des paquets non officiellement supportés ?\n"
        print_dialog_yesno "${titre}" "${messages}" "Visualiser" "Continuer"
        retour=$?
        if (( retour == 0 )); then
            printf '%s\n' "${BGreen}Liste des paquets non officiellement supportés:${Reset}"
            pacman -Qm | awk '{print $1}' > /tmp/aur_pkglist.txt
            cat /tmp/aur_pkglist.txt
            pause_function
        fi
        #
        chown -R ${USERNAME}:users /home/${USERNAME}
        retour=9
        titre="INSTALLATION TERMINÉE"
        messages=" \n"
        messages+="Redémarrer le système ?\n"
        print_dialog_yesno "${titre}" "${messages}" "Redémarrer" "Non"
        retour=$?
        if (( retour == 0 )); then
            reboot
        else
            exit 0
        fi
    }
    #}}}

    # DÉBUT INSTALLATION
    # Sets the interval of inactivity et fonts
    setterm -blank 0
#    setfont Lat2-Terminus16
    setfont lat9w-16
    #
    read_name_type_keyboard
    read_name_dir_archlinux
    read_name_mgr_efi
    check_is_uefi_or_bios
    check_is_in_virtualbox
#     check_is_cm_asus_z87c
    welcome
    check_root
    check_network
    check_already_launched
    add_custom_repositories
    set_launched
    system_upgrade
    language_selector
    configure_sudo
    select_user
    choose_aurhelper
    install_basic_setup
    install_xorg
    configure_font_presets
    install_video_cards
    install_cups

# DÉBUT INSTALLATION DE OU WM {{{
    messages=""
    titre="SÉLECTION DU D.E. «KDE 5» OU DU W.M. «OPENBOX»"
    messages="\n"
    messages+="Sélectionner l'environnement de bureau ${Byellow_dlg}KDE 5${Reset_dlg} ou le gestionnaire de fenêtres ${Byellow_dlg}OPENBOX${Reset_dlg} :"
    REPLY=$(dialog --colors --nocancel --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Sélectionner" --menu "${messages}" 16 72 5 \
            "KDE5" "Environnement de bureau" \
            "OPENBOX" "Gestionnaire de fenêtres" \
            3>&1 1>&2 2>&3)
    case "$REPLY" in
        "KDE5")
            source $(pwd)/ai-kde5
            ;;
        "OPENBOX")
            source $(pwd)/ai-ob
            ;;
    esac
    #
    install_desktop_environment
    install_accessories_apps
    install_system_apps
    install_development_apps
    install_office_apps
    install_graphics_apps
    install_internet_apps
    install_audio_apps
    install_video_apps
    install_games
#}}} FIN INSTALLATION DE OU WM

    install_fonts
    install_optional_dep_for_gtk3
    install_optional_dep_for_qt4
#     clean_orphan_packages             # APPEL SUPPRIMÉ
    update_mandb
    clean_cache_pacman
    finish
