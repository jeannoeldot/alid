#!/usr/bin/env bash

#-------------------------------------------------------------------------------
# ai-ob
# Appelé par ai-de
#
# Ce script installe OPENBOX
# Ne fonctionne qu'avec la langue FR (fr_FR)
#
# Interface graphique avec dialog
#-------------------------------------------------------------------------------

    # 20 DESKTOP ENVIRONMENT {{{
    install_desktop_environment() {
        local retour=9
        local messages=""
        local titre=""
        # OPENBOX {{{
        titre="INSTALLATION DE «OPENBOX»"
        messages="\n"
        messages+="Openbox est un gestionnaire de fenêtres très léger, simple et configurable.\n"
        print_dialog_msgbox "${titre}" "${messages}" "Continuer"
        #
        printf '%s\n' "${BGreen}Installation de ${BYellow}OPENBOX Base${BGreen}...${Reset}"
        package_install "openbox obconf obmenu menumaker openbox-themes xcursor-themes"
        #
        printf '%s\n' "${BGreen}Installation de ${BYellow}xdg-user-dirs${BGreen}...${Reset}"
        package_install "xdg-user-dirs python2-xdg"
        #
        printf '%s\n' "${BGreen}Installation de ${BYellow}numlockx, nitrogen et feh${BGreen}...${Reset}"
        package_install "numlockx nitrogen feh"
        #
        printf '%s\n' "${BGreen}Installation de ${BYellow}lxappearance-gtk3${BGreen}...${Reset}"
        package_install "lxappearance-gtk3 lxappearance-obconf-gtk3"
        #
        printf '%s\n' "${BGreen}Installation de ${BYellow}leafpad, epdfview et imagemagick${BGreen}...${Reset}"
        package_install "leafpad epdfview imagemagick"
        #
        printf '%s\n' "${BGreen}Installation de ${BYellow}tint2, lxterminal et terminator${BGreen}...${Reset}"
        package_install "tint2 orage lxterminal terminator perl-file-mimeinfo"
        #
        printf '%s\n' "${BGreen}Installation de ${BYellow}viewnior et gmrun${BGreen}...${Reset}"
        package_install "viewnior gmrun"
        #
        printf '%s\n' "${BGreen}Installation des dépendances de ${BYellow}imagemagick${BGreen}...${Reset}"
        package_install "openexr libwmf librsvg libxml2 jasper libpng"
        #
        printf '%s\n' "${BGreen}Installation de ${BYellow}pcmanfm-gtk3${BGreen}...${Reset}"
        package_install "pcmanfm-gtk3"
        #
        printf '%s\n' "${BGreen}Installation des dépendances de ${BYellow}pcmanfm${BGreen}...${Reset}"
        package_install "gvfs gvfs-afc gvfs-gphoto2 gvfs-mtp gvfs-nfs gvfs-smb"
        # FONTS
        printf '%s\n' "${BGreen}Installation de ${BYellow}Polices TTF${BGreen}...${Reset}"
        package_install "ttf-bitstream-vera ttf-dejavu ttf-freefont ttf-liberation ttf-linux-libertine ttf-droid ttf-ubuntu-font-family"
        # LSB-RELEASE
        printf '%s\n' "${BGreen}Installation de ${BYellow}lsb-release${BGreen}...${Reset}"
        package_install "lsb-release"
        # UPOWER
        printf '%s\n' "${BGreen}Installation de ${BYellow}upower${BGreen}...${Reset}"
        package_install "upower"
        # POLKIT-GNOME
        printf '%s\n' "${BGreen}Installation de ${BYellow}polkit-gnome${BGreen}...${Reset}"
        package_install "polkit-gnome"
        #
        if is_package_installed "cups" ; then
            printf '%s\n' "${BGreen}Installation de ${BYellow}system-config-printer${BGreen}...${Reset}"
            package_install "system-config-printer"
        fi
        #
        printf '%s\n' "${BGreen}Configuration par défaut de l'utilisateur ${BYellow}${USERNAME}${BGreen}...${Reset}"
        mkdir -p /home/${USERNAME}/.config/openbox
        cp -v /etc/xdg/openbox/{rc.xml,menu.xml,autostart,environment} /home/${USERNAME}/.config/openbox/
        chown -R ${USERNAME}:users /home/${USERNAME}/.config
        mkdir -p /home/${USERNAME}/.local/share
        chown -R ${USERNAME}:users /home/${USERNAME}/.local
        pause_function
        # OPENBOX CUSTOMIZATION AUTO {{{
        messages="\n"
        messages+="Customisation Personnelle Automatique pour ${Byellow_dlg}${USERNAME}${Reset_dlg}.\n\n"
        messages+="Customiser OpenBox pour ${Byellow_dlg}${USERNAME}${Reset_dlg} ?\n"
        print_dialog_yesno "${titre}" "${messages}" "Customiser" "Continuer"
        retour=$?
        if (( retour == 0 )); then
            # system grub si existe
            if is_package_installed "grub-bios" ; then
                printf '%s\n' "${BGreen}Customisation de ${BYellow}GRUB${BGreen}...${Reset}"
                echo -e '\n# Customization for '${UPPER_CASE_USERNAME} >> /etc/default/grub
                echo -e 'GRUB_COLOR_NORMAL="white/black"' >> /etc/default/grub
                echo -e 'GRUB_COLOR_HIGHLIGHT="black/light-gray"' >> /etc/default/grub
                echo -e 'GRUB_BACKGROUND="/boot/grub/arch-wallpaper-grub.jpg"' >> /etc/default/grub
                cp -v ai-fconfig/arch-wallpaper-grub.jpg /boot/grub/
                grub-mkconfig -o /boot/grub/grub.cfg
            fi
            retour=9
            messages="\n"
            messages+="Customisation Personnelle Automatique pour ${Byellow_dlg}${USERNAME}${Reset_dlg}.\n\n"
            messages+="Autologin pour ${Byellow_dlg}${USERNAME}${Reset_dlg} sans Gestionnaire de Connexion ?\n"
            print_dialog_yesno "${titre}" "${messages}" "Autologin" "Continuer"
            retour=$?
            if (( retour == 0 )); then
                # Autologin sans Gestionnaire de Connexion
                # https://wiki.archlinux.org/index.php/Xinitrc#Autostart_X_at_login
                printf '%s\n' "${BGreen}Configuration de ${BYellow}/home/${USERNAME}/.bash_profile${BGreen}...${Reset}"
                echo -e '\n# Autostart X at login' >> /home/${USERNAME}/.bash_profile
                echo -e '[[ -z $DISPLAY && $XDG_VTNR -eq 1 ]] && exec startx' >> /home/${USERNAME}/.bash_profile
                # https://wiki.archlinux.org/index.php/Automatic_login_to_virtual_console
                printf '%s\n' "${BGreen}Configuration de ${BYellow}getty@tty1.service${BGreen}...${Reset}"
                mkdir -p /etc/systemd/system/getty@tty1.service.d
                echo -e '[Service]' > /etc/systemd/system/getty@tty1.service.d/autologinuser.conf
                echo -e 'ExecStart=' >> /etc/systemd/system/getty@tty1.service.d/autologinuser.conf
                echo -e 'ExecStart=-/usr/bin/agetty --autologin '${USERNAME}' --noclear %I 38400 linux' >> /etc/systemd/system/getty@tty1.service.d/autologinuser.conf
                printf '%s\n' "${BGreen}Activation de ${BYellow}getty@tty1.service${BGreen}...${Reset}"
                systemctl enable getty@tty1.service
                #create a xinitrc file in home user directory
                printf '%s\n' "${BGreen}Configuration de ${BYellow}/home/${USERNAME}/.xinitrc${BGreen}...${Reset}"
                cp -vf ai-fconfig/ob-user-.xinitrc /home/${USERNAME}/.xinitrc
                if (( $IN_VIRTUAL_BOX == 1 )); then
                    echo -e "/usr/bin/VBoxClient-all &" >> /home/${USERNAME}/.xinitrc
                fi
                echo -e "exec openbox-session" >> /home/${USERNAME}/.xinitrc
                chown -R ${USERNAME}:users /home/${USERNAME}/.xinitrc
            else
                #install_display_manager LightDM
                printf '%s\n' "${BGreen}Installation du Gestionnaire de Connexion ${BYellow}LightDM${BGreen}...${Reset}"
                package_install "lightdm lightdm-gtk-greeter"
                # system LightDM
                printf '%s\n' "${BGreen}Configuration de ${BYellow}/etc/lightdm/lightdm.conf${BGreen}...${Reset}"
                sed -i "/^#greeter-session=example-gtk-gnome/c\greeter-session=lightdm-gtk-greeter" /etc/lightdm/lightdm.conf
                sed -i "/^#greeter-setup-script=/c\greeter-setup-script=/usr/bin/numlockx on" /etc/lightdm/lightdm.conf
                printf '%s\n' "${BGreen}Configuration de ${BYellow}/etc/lightdm/lightdm-gtk-greeter.conf${BGreen}...${Reset}"
                cp -vf ai-fconfig/ob-skyzl1-1920x1080.jpg /usr/share/pixmaps/skyzl1-1920x1080.jpg
                sed -i "/^#background=/c\background=/usr/share/pixmaps/skyzl1-1920x1080.jpg" /etc/lightdm/lightdm-gtk-greeter.conf
                printf '%s\n' "${BGreen}Activation de ${BYellow}lightdm.service${BGreen}...${Reset}"                
                systemctl enable lightdm.service
                printf '%s\n' "${BGreen}Configuration de ${BYellow}/home/${USERNAME}/.xprofile${BGreen}...${Reset}"
                cp -vf ai-fconfig/ob-user-.xinitrc /home/${USERNAME}/.xprofile
                if (( $IN_VIRTUAL_BOX == 1 )); then
                    echo -e "/usr/bin/VBoxClient-all &" >> /home/${USERNAME}/.xprofile
                fi
                chown -R ${USERNAME}:users /home/${USERNAME}/.xprofile
            fi
            # system sudoers
            printf '%s\n' "${BGreen}Configuration de ${BYellow}/etc/sudoers${BGreen}...${Reset}"
            sed -i "/^## User alias specification/i## My User alias" /etc/sudoers
            sed -i "/^## User alias specification/iUser_Alias ADMINS = ${USERNAME}\n##" /etc/sudoers
            sed -i "/^## Cmnd alias specification/i## My Cmnd alias" /etc/sudoers
            sed -i "/^## Cmnd alias specification/iCmnd_Alias HDDTEMP_CMDS = /usr/bin/hddtemp\n##" /etc/sudoers
            sed -i "/^## Defaults specification/i## My User specification" /etc/sudoers
            sed -i "/^## Defaults specification/iADMINS ALL=(ALL) NOPASSWD: HDDTEMP_CMDS\n##" /etc/sudoers
            # system openbox theme
            printf '%s\n' "${BGreen}Mise en place du thème ${BYellow}BlueSmoke${BGreen}...${Reset}"
            cp -R ai-fconfig/ob-usr-share-themes-BlueSmoke /usr/share/themes/BlueSmoke
            # system icon
            printf '%s\n' "${BGreen}Mise en place d'icones...${Reset}"
            cp -v ai-fconfig/accessories-calculator.png /usr/share/icons/hicolor/48x48/apps/
            cp -v ai-fconfig/xterm.png /usr/share/icons/hicolor/48x48/apps/
            cp -v ai-fconfig/virtualbox.png /usr/share/icons/hicolor/96x96/categories/
            # user wallpaper
            printf '%s\n' "${BGreen}Mise en place du fond d'écran ${BYellow}skyzl1-1920x1080.jpg${BGreen}...${Reset}"
            mkdir -p /home/${USERNAME}/09-Configurations/OO-Images-bureau
            cp -v ai-fconfig/ob-skyzl1-1920x1080.jpg /home/${USERNAME}/09-Configurations/OO-Images-bureau/skyzl1-1920x1080.jpg
            # user tint2
            printf '%s\n' "${BGreen}Configuration de ${BYellow}tint2${BGreen}...${Reset}"
            mkdir -p /home/${USERNAME}/.config/tint2
            if (( $IN_VIRTUAL_BOX == 1 )); then
                cp -v ai-fconfig/ob-user-.config-tint2-tint2rc-vbox /home/${USERNAME}/.config/tint2/tint2rc
            else
                cp -v ai-fconfig/ob-user-.config-tint2-tint2rc-reel /home/${USERNAME}/.config/tint2/tint2rc
            fi
            # user nitrogen
            printf '%s\n' "${BGreen}Configuration de ${BYellow}nitrogen${BGreen}...${Reset}"
            mkdir -p /home/${USERNAME}/.config/nitrogen
            cp -v ai-fconfig/ob-user-.config-nitrogen-bg-saved.cfg /home/${USERNAME}/.config/nitrogen/bg-saved.cfg
            sed -i "s/NAME-USER/${USERNAME}/g" /home/${USERNAME}/.config/nitrogen/bg-saved.cfg
            cp -v ai-fconfig/ob-user-.config-nitrogen-nitrogen.cfg /home/${USERNAME}/.config/nitrogen/nitrogen.cfg
            sed -i "s/NAME-USER/${USERNAME}/g" /home/${USERNAME}/.config/nitrogen/nitrogen.cfg
            # user terminator
            printf '%s\n' "${BGreen}Configuration de ${BYellow}terminator${BGreen}...${Reset}"
            mkdir -p /home/${USERNAME}/.config/terminator
            cp -v ai-fconfig/ob-user-.config-terminator-config /home/${USERNAME}/.config/terminator/config
            # user lxterminal
            printf '%s\n' "${BGreen}Configuration de ${BYellow}lxterminal${BGreen}...${Reset}"
            mkdir -p /home/${USERNAME}/.config/lxterminal
            cp -v ai-fconfig/ob-user-.config-lxterminal-lxterminal.conf /home/${USERNAME}/.config/lxterminal/lxterminal.conf
            mkdir -p /home/${USERNAME}/.local/share/applications
            cp -v ai-fconfig/ob-user-.local-share-applications-lxterminal.desktop /home/${USERNAME}/.local/share/applications/lxterminal.desktop
            # user gtk-3.0
            printf '%s\n' "${BGreen}Configuration de ${BYellow}gtk-3${BGreen}...${Reset}"
            mkdir -p /home/${USERNAME}/.config/gtk-3.0
            cp -v ai-fconfig/ob-user-.config-gtk-3.0-settings.ini /home/${USERNAME}/.config/gtk-3.0/settings.ini
            # user openbox
            printf '%s\n' "${BGreen}Configuration de ${BYellow}openbox${BGreen}...${Reset}"
            if (( $IN_VIRTUAL_BOX == 1 )); then
                cp -v ai-fconfig/ob-user-.config-openbox-autostart-vbox /home/${USERNAME}/.config/openbox/autostart
            else
                cp -v ai-fconfig/ob-user-.config-openbox-autostart-reel /home/${USERNAME}/.config/openbox/autostart
            fi
            sed -i "s/NAME-USER/${USERNAME}/g" /home/${USERNAME}/.config/openbox/autostart
            cp -v ai-fconfig/ob-user-.config-openbox-environment /home/${USERNAME}/.config/openbox/environment
            cp -v ai-fconfig/ob-user-.config-openbox-rc.xml /home/${USERNAME}/.config/openbox/rc.xml
            cp -v ai-fconfig/ob-user-.config-openbox-menu.xml /home/${USERNAME}/.config/openbox/menu.xml
            sed -i "s/NAME-USER/${USERNAME}/g" /home/${USERNAME}/.config/openbox/menu.xml
            chown -R ${USERNAME}:users /home/${USERNAME}/.config
            chown -R ${USERNAME}:users /home/${USERNAME}/.local
            # user bin
#           mkdir -p /home/${USERNAME}/bin
            printf '%s\n' "${BGreen}Installation des dépendances de ${BYellow}openbox-logout${BGreen}...${Reset}"
            package_install "python2-pillow"
            printf '%s\n' "${BGreen}Mise en place et Configuration des scripts dans ${BYellow}/home/${USERNAME}/bin${BGreen}...${Reset}"
            cp -R ai-fconfig/ob-user-bin-openbox-logout /home/${USERNAME}/bin/openbox-logout
            cp -v ai-fconfig/ob-user-bin-ob-quitter /home/${USERNAME}/bin/ob-quitter
            sed -i "s/NAME-USER/${USERNAME}/g" /home/${USERNAME}/bin/ob-quitter
            chmod +x /home/${USERNAME}/bin/openbox-logout/ob_logout.py
            chmod +x /home/${USERNAME}/bin/ob-quitter
            cp -v ai-fconfig/ob-user-bin-ob-terminator /home/${USERNAME}/bin/ob-terminator
            chmod +x /home/${USERNAME}/bin/ob-terminator
            cp -v ai-fconfig/ob-user-bin-ob-lxterminal /home/${USERNAME}/bin/ob-lxterminal
            chmod +x /home/${USERNAME}/bin/ob-lxterminal
            if (( $IN_VIRTUAL_BOX == 0 )); then
                cp -v ai-fconfig/ob-user-bin-ob-launcher_civ4 /home/${USERNAME}/bin/ob-launcher_civ4
                sed -i "s/NAME-USER/${USERNAME}/g" /home/${USERNAME}/bin/ob-launcher_civ4
                chmod +x /home/${USERNAME}/bin/ob-launcher_civ4
            fi
            if (( $IN_VIRTUAL_BOX == 1 )); then
                printf '%s\n' "${BGreen}Installation des dépendances de ${BYellow}phwmon.py${BGreen}...${Reset}"
                package_install "pygtk python2-psutil"
                cp -v ai-fconfig/ob-user-bin-phwmon.py /home/${USERNAME}/bin/phwmon.py
                chmod +x /home/${USERNAME}/bin/phwmon.py
            fi
            chown -R ${USERNAME}:users /home/${USERNAME}/bin
            # user gtkrc-2.0
            printf '%s\n' "${BGreen}Configuration de ${BYellow}gtk-2${BGreen}...${Reset}"
            cp -v ai-fconfig/ob-user-.gtkrc-2.0 /home/${USERNAME}/.gtkrc-2.0
            sed -i "s/NAME-USER/${USERNAME}/g" /home/${USERNAME}/.gtkrc-2.0
            chown -R ${USERNAME}:users /home/${USERNAME}/.gtkrc-2.0
            # user feh
            printf '%s\n' "${BGreen}Configuration de ${BYellow}feh${BGreen}...${Reset}"
            cp -v ai-fconfig/ob-user-.fehbg /home/${USERNAME}/.fehbg
            sed -i "s/NAME-USER/${USERNAME}/g" /home/${USERNAME}/.fehbg
            chown -R ${USERNAME}:users /home/${USERNAME}/.fehbg
            #
            printf '%s\n' "${BGreen}Copie du fichier ${BYellow}00-CMD-UTILES-OB-CK.TXT${BGreen} dans le répertoire /home de ${BYellow}${USERNAME}${BGreen}...${Reset}"
            cp -v ai-fconfig/00-CMD-UTILES-OB-CK.TXT /home/${USERNAME}/00-CMD-UTILES-OB-CK.TXT
            #
            chown -R ${USERNAME}:users /home/${USERNAME}
            printf '%s\n' "${BGreen}Installation de thèmes ${BYellow}GTK 3/2${BGreen}...${Reset}"
            package_install "gtk-update-icon-cache gnome-themes-extra gtk-engines"
            package_install "arc-gtk-theme gtk-engine-murrine"
            printf '%s\n' "${BGreen}Installation d'${BYellow}Icones${BGreen}...${Reset}"
            package_install "arc-icon-theme elementary-icon-theme"
            pause_function
        else
            #create a xinitrc file in home user directory
            printf '%s\n' "${BGreen}Configuration de ${BYellow}/home/${USERNAME}/.xinitrc${BGreen}...${Reset}"
            cp -vf ai-fconfig/ob-user-.xinitrc /home/${USERNAME}/.xinitrc
            if (( $IN_VIRTUAL_BOX == 1 )); then
                echo -e "/usr/bin/VBoxClient-all &" >> /home/${USERNAME}/.xinitrc
            fi
            echo -e "exec openbox-session" >> /home/${USERNAME}/.xinitrc
            chown -R ${USERNAME}:users /home/${USERNAME}/.xinitrc
            pause_function
        fi
        #}}}
        #OPENBOX CUSTOMIZATION
        retour=9
        messages=" \n"
        messages+="PERSONNALISATION DE OPENBOX :\n\n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 22 72 8)
            options=("faenza" "(Thèmes d'Icones)" ON
                    "compton" "(Compositeur pour X)" ON
                    "scrot" "(Capture d'écran pour X)" ON
                    "xfburn" "(Gravure)" ON
                    "xarchiver" "(Archivers)" ON
                    "xorg-xcalc" "(Calculatrice)" ON
                    "rxvt-unicode" "(Émulateur de Terminal)" OFF
                    "thunar" "(Gestionnaire de Fichiers)" OFF
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "faenza")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}faenza-icon-theme${BGreen}...${Reset}"
                    package_install "faenza-icon-theme"
                    ;;
                "compton")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}compton${BGreen}...${Reset}"
                    package_install "compton"
                    if is_package_installed "compton" ; then
                        printf '%s\n' "${BGreen}Installation de dépendances optionelles pour ${BYellow}compton${BGreen}...${Reset}"
                        package_install "xorg-xprop xorg-xwininfo"
                        pacman -D --asdeps xorg-xprop xorg-xwininfo
                        printf '%s\n' "${BGreen}Configuration de ${BYellow}compton${BGreen}...${Reset}"
                        sed -i "s/#compton/compton/g" /home/${USERNAME}/.config/openbox/autostart
                        if (( $IN_VIRTUAL_BOX == 1 )); then
                            cp -v ai-fconfig/ob-user-.config-compton.conf-vbox /home/${USERNAME}/.config/compton.conf
                        else
                            cp -v ai-fconfig/ob-user-.config-compton.conf-reel /home/${USERNAME}/.config/compton.conf
                        fi
                        chown -R ${USERNAME}:users /home/${USERNAME}/.config
                    fi
                    ;;
                "scrot")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}scrot${BGreen}...${Reset}"
                    package_install "scrot"
                    ;;
                "xfburn")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}xfburn${BGreen}...${Reset}"
                    package_install "xfburn"
                    ;;
                "xarchiver")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}xarchiver${BGreen}...${Reset}"
                    package_install "xarchiver"
                    ;;
                "xorg-xcalc")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}xorg-xcalc xorg-fonts-100dpi xorg-fonts-75dpi${BGreen}...${Reset}"
                    package_install "xorg-xcalc xorg-fonts-100dpi xorg-fonts-75dpi"
                    ;;
                "pcmanfm")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}pcmanfm polkit-gnome gvfs${BGreen}...${Reset}"
                    package_install "pcmanfm polkit-gnome gvfs"
                    ;;
                "rxvt-unicode")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}rxvt-unicode${BGreen}...${Reset}"
                    package_install "rxvt-unicode"
                    ;;
                "thunar")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}thunar thunar-archive-plugin thunar-volman tumbler polkit-gnome gvfs${BGreen}...${Reset}"
                    package_install "thunar thunar-archive-plugin thunar-volman tumbler polkit-gnome gvfs"
            esac
        done
        #
        printf '%s\n' "${BGreen}Configuration de ${BYellow}/etc/environment${BGreen}...${Reset}"
        echo "LANG=$LANGUAGE.utf8" >> /etc/environment
        # Abstraction for enumerating power devices, listening to device events and querying history and statistics
        printf '%s\n' "${BGreen}Activation de ${BYellow}upower.service${BGreen}...${Reset}"
        systemctl enable upower.service
        #
        OPENBOX=1
        pause_function
        # VBOX SHARED FOLDER AUTO
        # SI INSTALLATION DANS VIRTUALBOX
        if (( $IN_VIRTUAL_BOX == 1 )); then
            retour=9
            messages="\n"
            messages+="Installation dans ${Bwhite_dlg}Oracle VM VirtualBox${Reset_dlg}.\n\n"
            messages+="Monter automatiquement ${Byellow_dlg}VBox Shared Folder${Reset_dlg} pour ${Byellow_dlg}${USERNAME}${Reset_dlg} ?"
            print_dialog_yesno "${titre}" "${messages}" "Monter" "Continuer"
            retour=$?
            if (( retour == 0 )); then
                messages="\n"
                messages+="Installation dans ${Bwhite_dlg}Oracle VM VirtualBox${Reset_dlg}.\n\n"
                messages+="Choisir le PC Hôte ${Byellow_dlg}PC-John Windows${Reset_dlg} ou ${Byellow_dlg}PC-Jnd Arch Linux${Reset_dlg}"
                REPLY=$(dialog --colors --nocancel --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Sélectionner" --menu "${messages}" 16 72 5 \
                    "PC-John" "Windows" \
                    "PC-Jnd" "Arch Linux" \
                    3>&1 1>&2 2>&3)
                case "$REPLY" in
                    "PC-John")
                        name_rep_partage="Partage-Win7-WMs"
                        ;;
                    "PC-Jnd")
                        name_rep_partage="90-Partage"
                        ;;
                esac
                printf '%s\n' "${BGreen}Configuration de ${BYellow}/etc/fstab${BGreen}...${Reset}"
                mkdir -p /home/${USERNAME}/vbox-shared-folder
                chown -R ${USERNAME}:users /home/${USERNAME}/vbox-shared-folder
                user_uid=$(id -u ${USERNAME})
                user_gid=$(id -g ${USERNAME})
                echo -e '\n# Shared Folders as Arch Linux Guest' >> /etc/fstab
                echo -e "${name_rep_partage}"'     /home/'"${USERNAME}"'/vbox-shared-folder    vboxsf  uid='"$user_uid"',gid='"$user_gid"',rw,dmode=700,fmode=600,comment=systemd.automount       0 0' >> /etc/fstab
                pause_function
            fi
        fi
    }
    #}}}
    # 21 ACCESSORIES {{{
    install_accessories_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'APPLICATIONS ACCESSOIRES"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 18 72 4)
            options=("cairo-dock" "(Cairo Dock)" OFF
                    "conky" "(Moniteur Système pour X)" OFF
                    "docky" "(Docky Dock)" OFF
                    "plank" "(Plank Dock)" OFF
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "cairo-dock")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}cairo-dock cairo-dock-plugins${BGreen}...${Reset}"
                    package_install "cairo-dock cairo-dock-plugins"
                    ;;
                "conky")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}conky${BGreen}...${Reset}"
                    package_install "conky"
                    ;;
                "docky")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}docky${BGreen}...${Reset}"
                    package_install "docky"
                    ;;
                "plank")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}plank${BGreen}...${Reset}"
                    package_install "plank"
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
    # 22 SYSTEM TOOLS {{{
    install_system_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'OUTILS SYSTÈME"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 22 72 12)
            options=("gparted" "(Clone de Partition Magic)" ON
                    "grsync" "(IHM Graphique GTK pour rsync)" ON
                    "htop" "(Outils système)" ON
                    "lm_sensors" "(Surveillance du matériel)" ON
                    "hddtemp" "(Température HDD)" ON
                    "gsmartcontrol" "(S.M.A.R.T.)" ON
                    "hdparm" "(Ajustement paramètres HDD)" ON
                    "pacnew_scripts" "(Scripts pour fichiers .pacnew)" ON
                    "mesa-demos" "(Démos et outils Mesa)" ON
                    "qt5ct" "(Configuration de Qt5)" ON
                    "cpupower" "(Économie d'énergie du processeur)" OFF
                    "syslog-ng" "" OFF
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "gparted")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}gparted gptfdisk${BGreen}...${Reset}"
                   package_install "gparted gpart mtools gptfdisk"
                    ;;
                "grsync")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}grsync${BGreen}...${Reset}"
                    package_install "grsync"
                    ;;
                "htop")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}htop iotop lshw hwinfo dmidecode ncdu dfc expac pkgfile pacman-contrib pacutils i7z${BGreen}...${Reset}"
                    package_install "htop iotop lshw hwinfo dmidecode ncdu dfc expac pkgfile pacman-contrib pacutils pax-utils i7z"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}lsof strace${BGreen}...${Reset}"
                    package_install "lsof strace"
                    ;;
                "lm_sensors")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}lm_sensors rrdtool${BGreen}...${Reset}"
                    package_install "lm_sensors rrdtool"
                    # SI PAS DANS VIRTUALBOX
                    if (( $IN_VIRTUAL_BOX == 0 )); then
                        printf '%s\n' "${BGreen}LM_SENSORS - ${BYellow}sensors-detect${BGreen} : ${BYellow}Détections des capteurs${BGreen}...${Reset}"
                        pause_function
                        sensors-detect
                        printf '%s\n' "${BGreen}Activation de ${BYellow}lm_sensors.service${BGreen}...${Reset}"
                        systemctl enable lm_sensors.service
                    fi
                    ;;
                "hddtemp")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}hddtemp gnu-netcat${BGreen}...${Reset}"
                    package_install "hddtemp gnu-netcat"
                    printf '%s\n' "${BGreen}Activation de ${BYellow}hddtemp.service${BGreen}...${Reset}"
                    systemctl enable hddtemp.service
                    ;;
                "gsmartcontrol")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}gsmartcontrol${BGreen}...${Reset}"
                    package_install "gsmartcontrol"
                    ;;
                "hdparm")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}hdparm bonnie++${BGreen}...${Reset}"
                    package_install "hdparm bonnie++"
                    ;;
                "pacnew_scripts")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}pacnew_scripts${BGreen}...${Reset}"
                    package_install "pacnew_scripts"
                    ;;
                "mesa-demos")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}mesa-demos${BGreen}...${Reset}"
                    package_install "mesa-demos"
                    ;;
                "qt5ct")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}qt5ct${BGreen}...${Reset}"
                    package_install "qt5ct"
                    ;;
                "cpupower")
                    retour=9
                    messages="\n"
                    messages+="Installation de Cpupower :\n"
                    messages+="${BRcyan_dlg}!!!${Reset_dlg}Ne pas installer si Intel I7-4770K Haswell.\n\n"
                    messages+="Installer cpupower ?"
                    print_dialog_yesno "${titre}" "${messages}" "Installer" "Continuer"
                    retour=$?
                    if (( retour == 0 )); then
                        printf '%s\n' "${BGreen}Installation de ${BYellow}cpupower${BGreen}...${Reset}"
                        package_install "cpupower"
                        printf '%s\n' "${BGreen}Activation de ${BYellow}cpupower.service${BGreen}...${Reset}"
                        systemctl enable cpupower.service
                    fi
                    ;;
                "syslog-ng")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}syslog-ng${BGreen}...${Reset}"
                    package_install "syslog-ng"
                    printf '%s\n' "${BGreen}Activation de ${BYellow}syslog-ng.service${BGreen}...${Reset}"
                    systemctl enable syslog-ng.service
                    printf '%s\n' "${BGreen}Ajout de ${BYellow}${USERNAME}${BGreen} au groupe ${BYellow}log${BGreen}...${Reset}"
                    gpasswd -a ${USERNAME} log
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
   }
    #}}}
    # 23 DEVELOPEMENT {{{
    install_development_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'APPLICATIONS DE DÉVELOPPEMENT"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 20 72 8)
            options=("devtools" "(Outils pour les mainteneurs de paquets)" ON
                    "geany" "(IDE rapide et léger)" ON
                    "qtcreator" "(IDE léger et multi-plateforme - Qt5)" ON
                    "bluegriffon" "(Éditeur Web WYSIWYG)" ON
                    "gdb" "(Débogueur GNU)" ON
                    "git" "(Système de contrôle de version - VCS)" ON
                    "cmake" "(Système de compilation multi-plateforme)" ON
                    "clang" "(C interface pour LLVM)" OFF
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "devtools")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}base-devel devtools namcap boost doxygen${BGreen}...${Reset}"
                    package_install "base-devel devtools namcap boost doxygen"
                    ;;
                "geany")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}geany${BGreen}...${Reset}"
                    package_install "geany geany-plugins aspell-fr"
                    ;;
                "qtcreator")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}qtcreator qt qt5-doc libxkbcommon-x11${BGreen}...${Reset}"
                    package_install "qtcreator qt qt5-doc libxkbcommon-x11"
                    ;;
                "bluegriffon")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}bluegriffon${BGreen}...${Reset}"
                    package_install "bluegriffon"
                    ;;
                "gdb")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}valgrind gdb splint${BGreen}...${Reset}"
                    package_install "valgrind gdb splint"
                    ;;
                "git")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}git subversion${BGreen}...${Reset}"
                    package_install "git subversion"
                    ;;
                "cmake")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}cmake${BGreen}...${Reset}"
                    package_install "cmake"
                    ;;
                "clang")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}clang llvm${BGreen}...${Reset}"
                    package_install "clang llvm"
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
    # 24 OFFICE {{{
    install_office_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'APPLICATIONS DE BUREAUTIQUE"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 16 72 2)
            options=("libreoffice" "(LibreOffice Still)" ON
                    "goffice" "(Abiword + Gnumeric)" OFF
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "libreoffice")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}libreoffice-still${BGreen}...${Reset}"
                    package_install "libreoffice-still-$LANGUAGE_LO libreoffice-still libwpg unoconv"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}hyphen hunspell mythes${BGreen}...${Reset}"
                    package_install "hyphen-fr hyphen hunspell-fr hunspell mythes-fr libmythes"
                    ;;
                "goffice")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}gnumeric abiword${BGreen}...${Reset}"
                    package_install "gnumeric abiword"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}hyphen hunspell mythes${BGreen}...${Reset}"
                    package_install "hyphen-fr hyphen hunspell-fr hunspell mythes-fr libmythes"
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
    # 25 GRAPHICS {{{
    install_graphics_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'APPLICATIONS GRAPHIQUES"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 16 72 3)
            options=("blender" "(Création graphique 3D)" OFF
                    "gimp" "(Programme de Manipulation d'Image)" ON
                    "inkscape" "(Éditeur de graphiques vectoriels)" ON
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "blender")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}blender${BGreen}...${Reset}"
                    package_install "blender"
                    if (( $IN_VIRTUAL_BOX == 0 )); then
                        if is_package_installed "nvidia" ; then
                            printf '%s\n' "${BGreen}Installation de ${BYellow}cuda opencl-nvidia${BGreen}...${Reset}"
                            package_install "cuda opencl-nvidia"
                        fi
                    fi
                    ;;
                "gimp")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}gimp${BGreen}...${Reset}"
                    package_install "gimp"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}gimp-plugin${BGreen}...${Reset}"
                    package_install "potrace gimp-dbp gimp-plugin-fblur gimp-plugin-gmic gimp-plugin-lqr gimp-plugin-wavelet-denoise gimp-refocus gimp-nufraw"
                    ;;
                "inkscape")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}inkscape${BGreen}...${Reset}"
                    package_install "inkscape"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}gvfs pstoedit python2-lxml python2-numpy scour${BGreen}...${Reset}"
                    package_install "gvfs pstoedit python2-lxml python2-numpy python2-scour"
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
    # 26 INTERNET {{{
    install_internet_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'APPLICATIONS INTERNET"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 20 72 6)
            options=("chromium" "(Navigateur)" OFF
                    "firefox" "(Navigateur)" ON
                    "transmission" "(Téléchargement Torrent)" ON
                    "thunderbird" "(Lecteur de Mail/News)" OFF
                    "liferea" "(Lecteur de nouvelles en ligne et weblogs)" OFF
                    "xchat" "(Client IRC)" OFF
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi

            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "chromium")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}chromium${BGreen}...${Reset}"
                    package_install "chromium"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}pepper-flash${BGreen}...${Reset}"
                    package_install "pepper-flash"
                    printf '%s\n' "${BGreen}Configuration de ${BYellow}tint2${BGreen}...${Reset}"
                    sed -i "s/BROWSER/chromium/g" /home/${USERNAME}/.config/tint2/tint2rc
                    ;;
                "firefox")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}firefox pulseaudio${BGreen}...${Reset}"
                    package_install "firefox firefox-i18n-$LANGUAGE_FF pulseaudio"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}flashplugin, firefox-adblock-plus et firefox-extension-https-everywhere${BGreen}...${Reset}"
                    package_install "flashplugin firefox-adblock-plus firefox-extension-https-everywhere"
                    printf '%s\n' "${BGreen}Configuration de ${BYellow}tint2${BGreen}...${Reset}"
                    sed -i "s/BROWSER/firefox/g" /home/${USERNAME}/.config/tint2/tint2rc
                    ;;
                "transmission")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}transmission-gtk${BGreen}...${Reset}"
                    package_install "transmission-gtk"
                    ;;
                "thunderbird")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}thunderbird${BGreen}...${Reset}"
                    package_install "thunderbird thunderbird-i18n-$LANGUAGE_FF"
                    ;;
                "liferea")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}liferea${BGreen}...${Reset}"
                    package_install "liferea"
                    ;;
                "xchat")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}xchat${BGreen}...${Reset}"
                    package_install "xchat"
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
    # 27 AUDIO {{{
    install_audio_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'APPLICATIONS AUDIO"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 18 72 5)
            options=("clementine" "(Lecteur de musique)" ON
                    "soundconverter" "(Convertisseur audio)" ON
                    "audacity" "(Manipulateur d'ondes audio numériques)" ON
                    "easytag" "(Éditeur de tags des fichiers audio)" ON
                    "gstreamer" "(Framework multimédia)" ON
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "clementine")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}clementine${BGreen}...${Reset}"
                    package_install "clementine"
                    ;;
                "soundconverter")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}soundconverter${BGreen}...${Reset}"
                    package_install "soundconverter"
                    ;;
                "audacity")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}audacity${BGreen}...${Reset}"
                    package_install "audacity"
                    ;;
                "easytag")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}easytag${BGreen}...${Reset}"
                    package_install "easytag"
                    ;;
                "gstreamer")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}gst-plugins-base${BGreen}...${Reset}"
                    package_install "gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav mpg123 flac"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}gstreamer${BGreen}...${Reset}"
                    package_install "libcanberra-gstreamer"
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
    # 28 VIDEO {{{
    install_video_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'APPLICATIONS VIDÉO"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 18 72 4)
            options=("vlc" "(Lecteur vidéo MPEG, VCD/DVD et DivX)" ON
                    "openshot" "(Éditeur vidéo)" ON
                    "handbrake" "(Convertisseur vidéo)" ON
                    "DVD-Libs" "(libbluray libdvdread libdvdnav libdvdcss libaacs)" ON
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "vlc")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}vlc flac libbluray libdvdcss libcdio dav1d opus vcdimager${BGreen}...${Reset}"
                    package_install "vlc flac libbluray libdvdcss libcdio opus vcdimager"
                    if is_package_installed "nvidia" ; then
                        printf '%s\n' "${BGreen}Installation de ${BYellow}libva-vdpau-driver${BGreen}...${Reset}"
                        package_install "libva-vdpau-driver"
                    fi
                    ;;
                "openshot")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}openshot faac frei0r-plugins libavc1394 movit${BGreen}...${Reset}"
                    package_install "openshot faac frei0r-plugins libavc1394 movit"
                    ;;
                "handbrake")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}handbrake${BGreen}...${Reset}"
                    package_install "handbrake"
                    ;;
                "DVD-Libs")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}libbluray libdvdread libdvdnav libdvdcss libaacs cdrdao libquicktime${BGreen}...${Reset}"
                    package_install "libbluray libdvdread libdvdnav libdvdcss libaacs cdrdao libquicktime"
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
    # 29 GAMES {{{
    install_games() {
##
# A REVOIR jndqrami sur un repo perso
# TODO
##
        local retour=9
        local messages=""
        local titre="INSTALLATION D'APPLICATIONS JEUX"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 16 72 1)
            options=("pokerth" "(Poker Texas Hold'em)" ON
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "pokerth")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}pokerth${BGreen}...${Reset}"
                    package_install "pokerth"
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
#}}}}
