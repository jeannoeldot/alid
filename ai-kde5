#!/usr/bin/env bash

#-------------------------------------------------------------------------------
# ai-kde5
# Appelé par ai-de
#
# Ce script installe KDE5
#
# Ne fonctionne qu'avec la langue FR (fr_FR)
#
# Interface graphique avec dialog
#-------------------------------------------------------------------------------

    # 20 DESKTOP ENVIRONMENT {{{
    install_desktop_environment() {
        local retour=9
        local messages=""
        local titre=""
        # KDE5
        titre="INSTALLATION DE «KDE 5»"
        messages="\n"
        messages+="KDE est un projet de logiciel comprenant actuellement un environnement de bureau appelé Plasma (ou Plasma Workspaces), une collection de bibliothèques et de cadres (KDE Frameworks) et plusieurs applications (KDE Applications).\n"
        print_dialog_msgbox "${titre}" "${messages}" "Continuer"
        # KDE5 BASE
        printf '%s\n' "${BGreen}Installation de ${BYellow}KDE5 Base${BGreen}...${Reset}"
        package_install "plasma kf5 kf5-aids kde-l10n-$LANGUAGE_KDE5"
        package_install "konsole kwrite dolphin"
        # KDE5 LOOK
        printf '%s\n' "${BGreen}Installation de ${BYellow}KDE5 Look${BGreen}...${Reset}"
        package_install "oxygen-icons oxygen-icons-svg"
        package_install "oxygen-gtk2 oxygen-kde4"
        package_install "qtcurve-gtk2 qtcurve-qt4 qtcurve-qt5 breeze-kde4"
        # GTK theme matching Breeze
        package_install "breeze-gtk"
        # KDE5 UTILS
        printf '%s\n' "${BGreen}Installation de ${BYellow}KDE5 Utils${BGreen}...${Reset}"
        package_install "ark filelight kcalc kcharselect kdf kwalletmanager"
        # KDE5 MULTIMEDIA
        printf '%s\n' "${BGreen}Installation de ${BYellow}KDE5 Multimedia${BGreen}...${Reset}"
        package_install "audiocd-kio kio-extras kmix ffmpegthumbs"
        package_install "libdvdcss libdvdread libdvdnav"
        # KDE5 GRAPHICS
        printf '%s\n' "${BGreen}Installation de ${BYellow}KDE5 Graphiques${BGreen}...${Reset}"
        package_install "gwenview kcolorchooser kolourpaint spectacle okular svgpart kdegraphics-thumbnailers kdegraphics-mobipocket"
        package_install "kipi-plugins"
        # KDE5 SDK
        printf '%s\n' "${BGreen}Installation de ${BYellow}KDE5 SDK${BGreen}...${Reset}"
        package_install "okteta kate dolphin-plugins kompare poxml"
        # FONTS TTF
        printf '%s\n' "${BGreen}Installation de ${BYellow}Polices TTF${BGreen}...${Reset}"
        package_install "ttf-bitstream-vera ttf-dejavu ttf-freefont ttf-liberation ttf-linux-libertine ttf-droid ttf-ubuntu-font-family"
        # LSB-RELEASE
        printf '%s\n' "${BGreen}Installation de ${BYellow}lsb-release${BGreen}...${Reset}"
        package_install "lsb-release"
        #
        if is_package_installed "cups" ; then
            printf '%s\n' "${BGreen}Installation de ${BYellow}print-manager xdg-user-dirs${BGreen}...${Reset}"
            package_install "print-manager xdg-user-dirs"
        fi
        pause_function
        #KDE5 CUSTOMIZATION
        retour=9
        messages=" \n"
        messages+="PERSONNALISATION DE KDE5\n\n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 20 72 5)
            options=("choqok" "(Client Twitter)" OFF
                    "digikam" "(Gestion de photos)" ON
                    "k3b" "(Gravure)" ON
                    "skrooge" "(Gestion de finances)" OFF
                    "systemd-kcm" "(Module de commande de systemd)" ON
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "choqok")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}choqok${BGreen}...${Reset}"
                    package_install "choqok"
                    ;;
                "digikam")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}digikam${BGreen}...${Reset}"
                    package_install "digikam"
                    ;;
                "k3b")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}k3b cdrdao dvd+rw-tools vcdimager transcode emovix cdparanoia${BGreen}...${Reset}"
                    package_install "k3b cdrdao dvd+rw-tools vcdimager transcode emovix cdparanoia"
                    ;;
                "skrooge")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}skrooge${BGreen}...${Reset}"
                    package_install "skrooge"
                    ;;
                "systemd-kcm")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}systemd-kcm${BGreen}...${Reset}"
                    package_install "systemd-kcm"
            esac
        done
        #
        printf '%s\n' "${BGreen}Configuration de ${BYellow}/etc/environment${BGreen}...${Reset}"
        echo "LANG=$LANGUAGE.utf8" >> /etc/environment
        # https://wiki.archlinux.org/index.php/qt#Disable.2FChange_Qt_journal_logging_behaviour
        # Disable/Change Qt journal logging behaviour
        echo "# Completely disable Qt journal logging" >> /etc/environment
        echo "QT_LOGGING_RULES='*=false'" >> /etc/environment
        # Installe et Enable sddm.service
        printf '%s\n' "${BGreen}Installation de ${BYellow}sddm sddm-kcm${BGreen}...${Reset}"
        package_install "sddm sddm-kcm"
        printf '%s\n' "${BGreen}Activation de ${BYellow}sddm.service${BGreen}...${Reset}"
        systemctl enable sddm.service
        # Abstraction for enumerating power devices, listening to device events and querying history and statistics
        printf '%s\n' "${BGreen}Activation de ${BYellow}upower.service${BGreen}...${Reset}"
        systemctl enable upower.service
        # Mise en place d'un drop-in pour sddm.service si carte nvivia et drivers nvidia installé
        # https://bbs.archlinux.org/viewtopic.php?id=173153. brain0    Developer
        if is_package_installed "nvidia" ; then
            retour=9
            messages="\n"
            messages+="Carte Vidéo ${Bwhite_dlg}Nvidia ${L_NAME_CG_NVIDIA}${Reset_dlg} :\n\n"
            messages+="Activer un drop-in pour ${Byellow_dlg}sddm.service${Reset_dlg} ?"
            print_dialog_yesno "${titre}" "${messages}" "Activer" "Continuer"
            retour=$?
            if (( retour == 0 )); then
                printf '%s\n' "${BGreen}Activation d'un drop-in pour ${BYellow}sddm.service${BGreen}...${Reset}"
                cp -v ai-fconfig/etc-udev-rules.d-99-systemd-dri-devices.rules /etc/udev/rules.d/99-systemd-dri-devices.rules
                mkdir -p /etc/systemd/system/display-manager.service.d
                cp -v ai-fconfig/etc-systemd-system-display-manager.service.d-10-wait-for-dri-devices.conf /etc/systemd/system/display-manager.service.d/10-wait-for-dri-devices.conf
            fi
        fi
        #
        KDE5=1
        pause_function
        # VBOX SHARED FOLDER AUTO
        # SI INSTALLATION DANS VIRTUALBOX
        if (( $IN_VIRTUAL_BOX == 1 )); then
            retour=9
            messages="\n"
            messages+="Installation dans ${Bwhite_dlg}Oracle VM VirtualBox${Reset_dlg}.\n\n"
            messages+="Monter automatiquement ${Byellow_dlg}VBox Shared Folder${Reset_dlg} pour ${Byellow_dlg}${USERNAME}${Reset_dlg} ?"
            print_dialog_yesno "${titre}" "${messages}" "Monter" "Continuer"
            retour=$?
            if (( retour == 0 )); then
                messages="\n"
                messages+="Installation dans ${Bwhite_dlg}Oracle VM VirtualBox${Reset_dlg}.\n\n"
                messages+="Choisir le PC Hôte ${Byellow_dlg}PC-John Windows${Reset_dlg} ou ${Byellow_dlg}PC-Jnd Arch Linux${Reset_dlg}"
                REPLY=$(dialog --colors --nocancel --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Sélectionner" --menu "${messages}" 16 72 5 \
                    "PC-John" "Windows" \
                    "PC-Jnd" "Arch Linux" \
                    3>&1 1>&2 2>&3)
                case "$REPLY" in
                    "PC-John")
                        name_rep_partage="Partage-Win7-WMs"
                        ;;
                    "PC-Jnd")
                        name_rep_partage="90-Partage"
                        ;;
                esac
                printf '%s\n' "${BGreen}Configuration de ${BYellow}/etc/fstab${BGreen}...${Reset}"
                mkdir -p /home/${USERNAME}/vbox-shared-folder
                chown -R ${USERNAME}:users /home/${USERNAME}/vbox-shared-folder
                user_uid=$(id -u ${USERNAME})
                user_gid=$(id -g ${USERNAME})
                echo -e '\n# Shared Folders as Arch Linux Guest' >> /etc/fstab
                echo -e "${name_rep_partage}"'     /home/'"${USERNAME}"'/vbox-shared-folder    vboxsf  uid='"$user_uid"',gid='"$user_gid"',rw,dmode=700,fmode=600,comment=systemd.automount       0 0' >> /etc/fstab
                pause_function
            fi
        fi
    }
    #}}}
    # 21 ACCESSORIES {{{
    install_accessories_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'APPLICATIONS ACCESSOIRES"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 16 72 3)
            options=("cairo-dock" "(Cairo Dock)" OFF
                    "conky" "(Moniteur Système pour X)" OFF
                    "docky" "(Docky Dock)" OFF
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "cairo-dock")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}cairo-dock cairo-dock-plugins${BGreen}...${Reset}"
                    package_install "cairo-dock cairo-dock-plugins"
                    ;;
                "conky")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}conky${BGreen}...${Reset}"
                    package_install "conky"
                    ;;
                "docky")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}docky${BGreen}...${Reset}"
                    package_install "docky"
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
    # 22 SYSTEM TOOLS {{{
    install_system_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'OUTILS SYSTÈME"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 22 72 12)
            options=("gparted" "(Clone de Partition Magic)" ON
                    "grsync" "(IHM Graphique GTK pour rsync)" ON
                    "htop" "(Outils système)" ON
                    "lm_sensors" "(Surveillance du matériel)" ON
                    "hddtemp" "(Température HDD)" ON
                    "gsmartcontrol" "(S.M.A.R.T.)" ON
                    "hdparm" "(Ajustement paramètres HDD)" ON
                    "pacnew_scripts" "(Scripts pour fichiers .pacnew)" ON
                    "mesa-demos" "(Démos et outils Mesa)" ON
                    "qt5ct" "(Configuration de Qt5)" ON
                    "cpupower" "(Économie d'énergie du processeur)" OFF
                    "syslog-ng" "" OFF
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "gparted")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}gparted gptfdisk${BGreen}...${Reset}"
                    package_install "gparted gpart mtools gptfdisk"
                    mkdir -p /home/${USERNAME}/.local/share/applications
                    cp -v ai-fconfig/kde-user-gparted.desktop /home/${USERNAME}/.local/share/applications/gparted.desktop
                    chown -R ${USERNAME}:users /home/${USERNAME}/.local
                    ;;
                "grsync")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}grsync${BGreen}...${Reset}"
                    package_install "grsync"
                    ;;
                "htop")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}htop iotop lshw hwinfo dmidecode ncdu dfc expac pkgfile pacman-contrib i7z${BGreen}...${Reset}"
                    package_install "htop iotop lshw hwinfo dmidecode ncdu dfc expac pkgfile pacman-contrib i7z"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}lsof strace${BGreen}...${Reset}"
                    package_install "lsof strace"
                    ;;
                "lm_sensors")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}lm_sensors rrdtool${BGreen}...${Reset}"
                    package_install "lm_sensors rrdtool"
                    # SI PAS DANS VIRTUALBOX
                    if (( $IN_VIRTUAL_BOX == 0 )); then
                        printf '%s\n' "${BGreen}LM_SENSORS - ${BYellow}sensors-detect${BGreen} : ${BYellow}Détections des capteurs${BGreen}...${Reset}"
                        pause_function
                        sensors-detect
                        printf '%s\n' "${BGreen}Activation de ${BYellow}lm_sensors.service${BGreen}...${Reset}"
                        systemctl enable lm_sensors.service
                    fi
                    ;;
                "hddtemp")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}hddtemp gnu-netcat${BGreen}...${Reset}"
                    package_install "hddtemp gnu-netcat"
                    printf '%s\n' "${BGreen}Activation de ${BYellow}hddtemp.service${BGreen}...${Reset}"
                    systemctl enable hddtemp.service
                    ;;
                "gsmartcontrol")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}gsmartcontrol${BGreen}...${Reset}"
                    package_install "gsmartcontrol"
                    mkdir -p /home/${USERNAME}/.local/share/applications
                    cp -v ai-fconfig/kde-user-gsmartcontrol.desktop /home/${USERNAME}/.local/share/applications/gsmartcontrol.desktop
                    chown -R ${USERNAME}:users /home/${USERNAME}/.local
                    ;;
                "hdparm")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}hdparm bonnie++${BGreen}...${Reset}"
                    package_install "hdparm bonnie++"
                    ;;
                "pacnew_scripts")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}pacnew_scripts${BGreen}...${Reset}"
                    package_install "pacnew_scripts"
                    ;;
                "mesa-demos")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}mesa-demos${BGreen}...${Reset}"
                    package_install "mesa-demos"
                    ;;
                "qt5ct")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}qt5ct${BGreen}...${Reset}"
                    package_install "qt5ct"
                    ;;
                "cpupower")
                    retour=9
                    messages="\n"
                    messages+="Installation de Cpupower :\n"
                    messages+="${BRcyan_dlg}!!!${Reset_dlg}Ne pas installer si Intel I7-4770K Haswell.\n\n"
                    messages+="Installer cpupower ?"
                    print_dialog_yesno "${titre}" "${messages}" "Installer" "Continuer"
                    retour=$?
                    if (( retour == 0 )); then
                        printf '%s\n' "${BGreen}Installation de ${BYellow}cpupower${BGreen}...${Reset}"
                        package_install "cpupower"
                        printf '%s\n' "${BGreen}Activation de ${BYellow}cpupower.service${BGreen}...${Reset}"
                        systemctl enable cpupower.service
                    fi
                    ;;
                "syslog-ng")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}syslog-ng${BGreen}...${Reset}"
                    package_install "syslog-ng"
                    printf '%s\n' "${BGreen}Activation de ${BYellow}syslog-ng.service${BGreen}...${Reset}"
                    systemctl enable syslog-ng.service
                    printf '%s\n' "${BGreen}Ajout de ${BYellow}${USERNAME}${BGreen} au groupe ${BYellow}log${BGreen}...${Reset}"
                    gpasswd -a ${USERNAME} log
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
    # 23 DEVELOPEMENT {{{
    install_development_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'APPLICATIONS DE DÉVELOPPEMENT"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 20 72 8)
            options=("kdevelop" "(IDE C/C ++ pour KDE)" OFF
                    "qtcreator" "(IDE léger et multi-plateforme - Qt5)" ON
                    "bluegriffon" "(Éditeur Web WYSIWYG)" ON
                    "devtools" "(Outils pour les mainteneurs de paquets)" ON
                    "gdb" "(Débogueur GNU)" ON
                    "git" "(Système de contrôle de version - VCS)" ON
                    "cmake" "(Système de compilation multi-plateforme)" ON
                    "clang" "(C interface pour LLVM)" OFF
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "kdevelop")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}kdevelop${BGreen}...${Reset}"
                    package_install "kdevelop"
                    ;;
                "qtcreator")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}qtcreator qt qt5-doc libxkbcommon-x11${BGreen}...${Reset}"
                    package_install "qtcreator qt qt5-doc libxkbcommon-x11"
                    ;;
                "bluegriffon")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}bluegriffon${BGreen}...${Reset}"
                    package_install "bluegriffon"
                    ;;
                "devtools")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}devtools${BGreen}...${Reset}"
                    package_install "devtools"
                    ;;
                "gdb")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}valgrind gdb splint${BGreen}...${Reset}"
                    package_install "valgrind gdb splint"
                    ;;
                "git")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}git subversion${BGreen}...${Reset}"
                    package_install "git subversion"
                    ;;
                "cmake")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}cmake${BGreen}...${Reset}"
                    package_install "cmake"
                    ;;
                "clang")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}clang${BGreen}...${Reset}"
                    package_install "clang"
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
    # 24 OFFICE {{{
    install_office_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'APPLICATIONS DE BUREAUTIQUE"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 16 72 2)
            options=("libreoffice" "(LibreOffice Still)" ON
                    "calligra" "(Calligra Office Suite)" OFF
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "libreoffice")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}libreoffice-still${BGreen}...${Reset}"
                    package_install "libreoffice-still-$LANGUAGE_LO libreoffice-still libwpg unoconv"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}hyphen hunspell mythes${BGreen}...${Reset}"
                    package_install "hyphen-fr hyphen hunspell-fr hunspell mythes-fr libmythes"
                    ;;
                "calligra")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}calligra${BGreen}...${Reset}"
                    package_install "calligra calligra-l10n-fr"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}hyphen hunspell mythes${BGreen}...${Reset}"
                    package_install "hyphen-fr hyphen hunspell-fr hunspell mythes-fr libmythes"
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
    # 25 GRAPHICS {{{
    install_graphics_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'APPLICATIONS GRAPHIQUES"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 16 72 4)
            options=("blender" "(Création graphique 3D)" OFF
                    "gimp" "(Programme de Manipulation d'Image)" OFF
                    "inkscape" "(Éditeur de graphiques vectoriels)" ON
                    "krita" "(Modifier et peindre des images)" ON
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "blender")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}blender${BGreen}...${Reset}"
                    package_install "blender"
                    if (( $IN_VIRTUAL_BOX == 0 )); then
                        if is_package_installed "nvidia" ; then
                            printf '%s\n' "${BGreen}Installation de ${BYellow}cuda opencl-nvidia${BGreen}...${Reset}"
                            package_install "cuda opencl-nvidia"
                        fi
                    fi
                    ;;
                "gimp")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}gimp libopenraw${BGreen}...${Reset}"
                    package_install "gimp libopenraw"
                    pacman -D --asdeps libopenraw
                    printf '%s\n' "${BGreen}Installation de ${BYellow}gimp-plugin${BGreen}...${Reset}"
                    package_install "potrace gimp-dbp gimp-plugin-fblur gimp-plugin-gmic gimp-plugin-lqr gimp-plugin-wavelet-denoise gimp-refocus gimp-nufraw"
                    ;;
                "inkscape")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}inkscape${BGreen}...${Reset}"
                    package_install "inkscape"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}gvfs pstoedit python2-lxml python2-numpy python2-scour texlive-core${BGreen}...${Reset}"
                    package_install "gvfs pstoedit python2-lxml python2-numpy python2-scour texlive-core"
                    ;;
                "krita")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}krita${BGreen}...${Reset}"
                    package_install "krita"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}ffmpeg krita-plugin-gmic opencolorio poppler-qt5${BGreen}...${Reset}"
                    package_install "ffmpeg krita-plugin-gmic opencolorio poppler-qt5"
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
    # 26 INTERNET {{{
    install_internet_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'APPLICATIONS INTERNET"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 20 72 7)
            options=("chromium" "(Navigateur)" OFF
                    "firefox" "(Navigateur)" ON
                    "transmission" "(Téléchargement Torrent)" ON
                    "kget" "(Gestionnaire de téléchargements)" OFF
                    "thunderbird" "(Lecteur de Mail/News)" OFF
                    "konversation" "(Client IRC)" OFF
                    "quassel" "(Client IRC)" OFF
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "chromium")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}chromium${BGreen}...${Reset}"
                    package_install "chromium"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}pepper-flash${BGreen}...${Reset}"
                    package_install "pepper-flash"
                    ;;
                "firefox")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}firefox pulseaudio${BGreen}...${Reset}"
                    package_install "firefox firefox-i18n-$LANGUAGE_FF pulseaudio"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}flashplugin, firefox-adblock-plus et firefox-extension-https-everywhere${BGreen}...${Reset}"
                    package_install "flashplugin firefox-adblock-plus firefox-extension-https-everywhere"
                    ;;
                "transmission")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}transmission-qt${BGreen}...${Reset}"
                    package_install "transmission-qt"
                    ;;
                "kget")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}kget${BGreen}...${Reset}"
                    package_install "kget"
                    ;;
                "thunderbird")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}thunderbird${BGreen}...${Reset}"
                    package_install "thunderbird thunderbird-i18n-$LANGUAGE_FF"
                    ;;
                "konversation")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}konversation${BGreen}...${Reset}"
                    package_install "konversation"
                    ;;
                "quassel")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}quassel-client${BGreen}...${Reset}"
                    package_install "quassel-client"
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
    # 27 AUDIO {{{
    install_audio_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'APPLICATIONS AUDIO"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 20 72 6)
            options=("amarok" "(Lecteur de musique pour KDE)" ON
                    "clementine" "(Lecteur de musique)" ON
                    "soundkonverter" "(Convertisseur audio)" ON
                    "audacity" "(Manipulateur d'ondes audio numériques)" ON
                    "easytag" "(Éditeur de tags des fichiers audio)" ON
                    "gstreamer" "(Framework multimédia)" ON
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "amarok")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}amarok${BGreen}...${Reset}"
                    package_install "amarok"
                    ;;
                "clementine")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}clementine${BGreen}...${Reset}"
                    package_install "clementine"
                    ;;
                "soundkonverter")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}soundkonverter${BGreen}...${Reset}"
                    package_install "soundkonverter"
                    ;;
                "audacity")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}audacity${BGreen}...${Reset}"
                    package_install "audacity"
                    ;;
                "easytag")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}easytag${BGreen}...${Reset}"
                    package_install "easytag"
                    ;;
                "gstreamer")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}gst-plugins-base${BGreen}...${Reset}"
                    package_install "gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav mpg123 flac"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}gstreamer${BGreen}...${Reset}"
                    package_install "libcanberra-gstreamer"
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
    # 28 VIDEO {{{
    install_video_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'APPLICATIONS VIDÉO"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 18 72 4)
            options=("vlc" "(Lecteur vidéo MPEG, VCD/DVD et DivX)" ON
                    "kdenlive" "(Éditeur vidéo)" ON
                    "handbrake" "(Convertisseur vidéo)" ON
                    "DVD-Libs" "(libbluray libdvdread libdvdnav libdvdcss libaacs)" ON
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "vlc")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}vlc flac libbluray libdvdcss libcdio opus vcdimager${BGreen}...${Reset}"
                    package_install "vlc flac libbluray libdvdcss libcdio opus vcdimager"
                    if is_package_installed "nvidia" ; then
                        printf '%s\n' "${BGreen}Installation de ${BYellow}libva-vdpau-driver${BGreen}...${Reset}"
                        package_install "libva-vdpau-driver"
                    fi
                    ;;
                "kdenlive")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}kdenlive cdrtools dvdauthor dvgrab ffmpeg recordmydesktop frei0r-plugins sox movit${BGreen}...${Reset}"
                    package_install "kdenlive cdrtools dvdauthor dvgrab ffmpeg recordmydesktop frei0r-plugins sox movit"
                    ;;
                "handbrake")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}handbrake${BGreen}...${Reset}"
                    package_install "handbrake"
                    ;;
                "DVD-Libs")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}libbluray libdvdread libdvdnav libdvdcss libaacs cdrdao libquicktime${BGreen}...${Reset}"
                    package_install "libbluray libdvdread libdvdnav libdvdcss libaacs cdrdao libquicktime"
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
    # 29 GAMES {{{
    install_games() {
##
# A REVOIR jndqrami sur un repo perso
# TODO
##
        local retour=9
        local messages=""
        local titre="INSTALLATION D'APPLICATIONS JEUX"
        messages=" \n"
        until (( retour == 0 )) || (( retour == 1 ));
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Continuer" --checklist "${messages}" 16 72 1)
            options=("pokerth" "(Poker Texas Hold'em)" ON
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if (( retour == 0 )); then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "pokerth")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}pokerth${BGreen}...${Reset}"
                    package_install "pokerth"
            esac
        done
        if [[ $REPLY != "" ]]; then
            pause_function
        fi
    }
    #}}}
