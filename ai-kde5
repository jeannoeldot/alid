#!/usr/bin/env bash

#-------------------------------------------------------------------------------
# ai-kde5
# Appelé par ai-de
#
# Ce script installe KDE5
#
# Ne fonctionne qu'avec la langue FR (fr_FR)
#
# Interface graphique avec dialog
#-------------------------------------------------------------------------------

    # 15 DESKTOP ENVIRONMENT {{{
    install_desktop_environment() {
        local retour=9
        local messages=""
        local titre=""
        # KDE5
        titre="INSTALLATION DE KDE 5"
        messages="\n"
        messages+="KDE est un projet de logiciel comprenant actuellement un environnement de bureau appelé Plasma (ou Plasma Workspaces), une collection de bibliothèques et de cadres (KDE Frameworks) et plusieurs applications (KDE Applications).\n"
        print_dialog_msgbox "${titre}" "${messages}" "Continuer"
        # KDE5 BASE
        printf '%s\n' "${BGreen}Installation de ${BYellow}KDE5 Base${BGreen}...${Reset}"
        package_install "plasma kf5 kf5-aids kde-l10n-$LANGUAGE_KDE5"
        package_install "konsole kwrite dolphin"
        # KDE5 LOOK
        printf '%s\n' "${BGreen}Installation de ${BYellow}KDE5 Look${BGreen}...${Reset}"
        package_install "oxygen-icons oxygen-icons-svg"
        package_install "oxygen-gtk2 oxygen-kde4"
        package_install "qtcurve-gtk2 qtcurve-qt4 qtcurve-qt5 breeze-kde4"
        # GTK theme matching Breeze
        package_install "gtk-theme-orion"
        # KDE5 UTILS
        printf '%s\n' "${BGreen}Installation de ${BYellow}KDE5 Utils${BGreen}...${Reset}"
        package_install "ark filelight kcalc kcharselect kdeutils-kdf kwalletmanager"
        # KDE5 MULTIMEDIA
        printf '%s\n' "${BGreen}Installation de ${BYellow}KDE5 Multimedia${BGreen}...${Reset}"
        package_install "kdemultimedia-kscd kdemultimedia-audiocd-kio kio-mtp kio-extras"
        # Remplace kdemultimedia-kmix : PAS de miniature dans Barre des Tâches
        package_install "kmix"
        package_install "libdvdcss libdvdread libdvdnav"
        # KDE5 GRAPHICS
        printf '%s\n' "${BGreen}Installation de ${BYellow}KDE5 Graphiques${BGreen}...${Reset}"
        package_install "gwenview kdegraphics-kcolorchooser kdegraphics-kolourpaint kdegraphics-ksnapshot kdegraphics-okular kdegraphics-svgpart kdegraphics-thumbnailers kdegraphics-mobipocket"
        package_install "kipi-plugins"
        package_install "ffmpegthumbs"
        # KDE5 SDK
        printf '%s\n' "${BGreen}Installation de ${BYellow}KDE5 SDK${BGreen}...${Reset}"
        package_install "okteta kate dolphin-plugins kdesdk-kioslaves kompare kdesdk-poxml kdebindings-python2 kdebindings-python"
        # KDE5 FONTS
        printf '%s\n' "${BGreen}Installation de ${BYellow}KDE5 Polices TTF${BGreen}...${Reset}"
        package_install "ttf-bitstream-vera ttf-dejavu ttf-freefont ttf-liberation ttf-linux-libertine ttf-droid ttf-ubuntu-font-family ttf-oxygen"
        # LSB-RELEASE
        printf '%s\n' "${BGreen}Installation de ${BYellow}lsb-release${BGreen}...${Reset}"
        package_install "lsb-release"
        #
        if is_package_installed "cups" ; then
            printf '%s\n' "${BGreen}Installation de ${BYellow}print-manager xdg-user-dirs${BGreen}...${Reset}"
            package_install "print-manager xdg-user-dirs"
        fi
        #
        printf '%s\n' "${BGreen}Configuration de ${BYellow}/etc/environment${BGreen}...${Reset}"
        echo "LANG=$LANGUAGE.utf8" >> /etc/environment
        echo "FT2_SUBPIXEL_HINTING=1" >> /etc/environment
        # Installe et Enable sddm.service
        printf '%s\n' "${BGreen}Installation de ${BYellow}sddm sddm-kcm${BGreen}...${Reset}"
        package_install "sddm sddm-kcm"
        printf '%s\n' "${BGreen}Activation de ${BYellow}sddm.service${BGreen}...${Reset}"
        systemctl enable sddm.service
        # Abstraction for enumerating power devices, listening to device events and querying history and statistics
        printf '%s\n' "${BGreen}Activation de ${BYellow}upower.service${BGreen}...${Reset}"
        systemctl enable upower.service
        # Mise en place d'un drop-in pour sddm.service si carte nvivia et drivers nvidia installé
        # https://bbs.archlinux.org/viewtopic.php?id=173153. brain0    Developer
        if is_package_installed "nvidia" ; then
            retour=9
            messages="\n"
            messages+="Carte Vidéo Nvidia ${L_NAME_CG_NVIDIA} :\n\n"
            messages+="Activer un drop-in pour «sddm.service» ?"
            print_dialog_yesno "${titre}" "${messages}" "Activer" "Continuer"
            retour=$?
            if [[ $retour = 0 ]]; then
                printf '%s\n' "${BGreen}Activation d'un drop-in pour ${BYellow}sddm.service${BGreen}...${Reset}"
                cp -v ai-fconfig/etc-udev-rules.d-99-systemd-dri-devices.rules /etc/udev/rules.d/99-systemd-dri-devices.rules
                mkdir -p /etc/systemd/system/display-manager.service.d
                cp -v ai-fconfig/etc-systemd-system-display-manager.service.d-10-wait-for-dri-devices.conf /etc/systemd/system/display-manager.service.d/10-wait-for-dri-devices.conf
            fi
        fi
        #
        KDE5=1
        pause_function
        # VBOX SHARED FOLDER AUTO
        # SI INSTALLATION DANS VIRTUALBOX
        if [[ $IN_VIRTUAL_BOX -eq 1 ]]; then
            retour=9
            messages="\n"
            messages+="Installation dans «Oracle VM VirtualBox».\n\n"
            messages+="Monter automatiquement «VBox Shared Folder» pour «${USERNAME}» ?"
            print_dialog_yesno "${titre}" "${messages}" "Monter" "Continuer"
            retour=$?
            if [[ $retour = 0 ]]; then
                messages="\n"
                messages+="Installation dans «Oracle VM VirtualBox».\n\n"
                messages+="Choisir le PC Hôte «PC-John Windows 7» ou «PC-Jnd Arch Linux»"
                REPLY=$(dialog --nocancel --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Sélectionner" --menu "${messages}" 16 72 5 \
                    "PC-John" "Windows 7" \
                    "PC-Jnd" "Arch Linux" \
                    3>&1 1>&2 2>&3)
                case "$REPLY" in
                    "PC-John")
                        name_rep_partage="Partage-Win7-WMs"
                        ;;
                    "PC-Jnd")
                        name_rep_partage="90-Partage"
                        ;;
                esac
                printf '%s\n' "${BGreen}Configuration de ${BYellow}/etc/fstab${BGreen}...${Reset}"
                mkdir -p /home/${USERNAME}/vbox-shared-folder
                chown -R ${USERNAME}:users /home/${USERNAME}/vbox-shared-folder
                user_uid=$(id -u ${USERNAME})
                user_gid=$(id -g ${USERNAME})
                echo -e '\n# Shared Folders as Arch Linux Guest' >> /etc/fstab
                echo -e "${name_rep_partage}"'     /home/'"${USERNAME}"'/vbox-shared-folder    vboxsf  uid='"$user_uid"',gid='"$user_gid"',rw,dmode=700,fmode=600,comment=systemd.automount       0 0' >> /etc/fstab
                pause_function
            fi
        fi
    }
    #}}}
    # 17 ACCESSORIES {{{
    install_accessories_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'APPLICATIONS ACCESSOIRES"
        messages=" \n"
        until [[ $retour = 0 ]];
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Annuler" --checklist "${messages}" 16 72 3)
            options=("cairo-dock" "" OFF
                    "conky-lua-nv" "(AUR)" OFF
                    "docky" "" OFF
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if [[ $retour = 0 ]]; then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            else
                retour=0
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "cairo-dock")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}cairo-dock cairo-dock-plugins${BGreen}...${Reset}"
                    package_install "cairo-dock cairo-dock-plugins"
                    ;;
                "conky-lua-nv")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}conky-lua-nv${BGreen}...${Reset}"
                    aur_package_install "conky-lua-nv"
                    ;;
                "docky")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}docky${BGreen}...${Reset}"
                    package_install "docky"
            esac
        done
        pause_function
    }
    #}}}
    # 17 SYSTEM TOOLS {{{
    install_system_apps() {
        local retour=9
        local messages=""
        local titre="INSTALLATION D'OUTILS SYSTÈME"
        messages=" \n"
        until [[ $retour = 0 ]];
        do
            cmd=(dialog --backtitle "${TITRE_BOX_W}" --title "${titre}" --ok-label "Installer" --cancel-label "Annuler" --checklist "${messages}" 22 72 12)
            options=("gparted" "+ gptfdisk" OFF
                    "grsync" "" OFF
                    "htop" "+ iotop lshw hwinfo ..." OFF
                    "lm_sensors" "+ rrdtool" OFF
                    "hddtemp" "+ gnu-netcat" OFF
                    "gsmartcontrol" "(S.M.A.R.T.)" OFF
                    "hdparm" "+ bonnie++" OFF
                    "pacnew_scripts" "" OFF
                    "mesa-demos" "" OFF
                    "qt5ct" "" OFF
                    "cpupower" "(Inutile si Intel I7-4770K Haswell)" OFF
                    "syslog-ng" "" OFF
                    )
            REPLY=$("${cmd[@]}" "${options[@]}" 3>&1 1>&2 2>&3)
            retour=$?
            if [[ $retour = 0 ]]; then
                if [[ $REPLY == "" ]]; then
                    retour=9
                fi
            else
                retour=0
            fi
        done
        for choix in $REPLY
        do
            case $choix in
                "gparted")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}gparted gptfdisk${BGreen}...${Reset}"
                    package_install "gparted gptfdisk"
                    mkdir -p /home/${USERNAME}/.local/share/applications
                    cp -v ai-fconfig/kde-user-gparted.desktop /home/${USERNAME}/.local/share/applications/gparted.desktop
                    chown -R ${USERNAME}:users /home/${USERNAME}/.local
                    ;;
                "grsync")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}grsync${BGreen}...${Reset}"
                    package_install "grsync"
                    ;;
                "htop")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}htop iotop lshw hwinfo dmidecode ncdu dfc expac pkgfile i7z inxi${BGreen}...${Reset}"
                    package_install "htop iotop lshw hwinfo dmidecode ncdu dfc expac pkgfile i7z inxi"
                    printf '%s\n' "${BGreen}Installation de ${BYellow}lsof strace${BGreen}...${Reset}"
                    package_install "lsof strace"
                    ;;
                "lm_sensors")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}lm_sensors rrdtool${BGreen}...${Reset}"
                    package_install "lm_sensors rrdtool"
                    # SI PAS DANS VIRTUALBOX
                    if [[ $IN_VIRTUAL_BOX -eq 0 ]]; then
                        printf '%s\n' "${BGreen}LM_SENSORS - sensors-detect : détections des capteurs...${Reset}"
                        pause_function
                        sensors-detect
                        printf '%s\n' "${BGreen}Activation de ${BYellow}lm_sensors.service${BGreen}...${Reset}"
                        systemctl enable lm_sensors.service
                    fi
                    ;;
                "hddtemp")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}hddtemp gnu-netcat${BGreen}...${Reset}"
                    package_install "hddtemp gnu-netcat"
                    printf '%s\n' "${BGreen}Activation de ${BYellow}hddtemp.service${BGreen}...${Reset}"
                    systemctl enable hddtemp.service
                    ;;
                "gsmartcontrol")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}gsmartcontrol${BGreen}...${Reset}"
                    package_install "gsmartcontrol"
                    mkdir -p /home/${USERNAME}/.local/share/applications
                    cp -v ai-fconfig/kde-user-gsmartcontrol.desktop /home/${USERNAME}/.local/share/applications/gsmartcontrol.desktop
                    chown -R ${USERNAME}:users /home/${USERNAME}/.local
                    ;;
                "hdparm")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}hdparm bonnie++${BGreen}...${Reset}"
                    package_install "hdparm bonnie++"
                    ;;
                "pacnew_scripts")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}pacnew_scripts${BGreen}...${Reset}"
                    package_install "pacnew_scripts"
                    ;;
                "mesa-demos")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}mesa-demos${BGreen}...${Reset}"
                    package_install "mesa-demos"
                    ;;
                "qt5ct")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}qt5ct${BGreen}...${Reset}"
                    package_install "qt5ct"
                    ;;
                "cpupower")
                    retour=9
                    messages="\n"
                    messages+="Installation de Cpupower :\n"
                    messages+="${BRcyan_dlg}!!!${Reset_dlg}Ne pas installer si Intel I7-4770K Haswell.\n\n"
                    messages+="Installer cpupower ?"
                    print_dialog_yesno "${titre}" "${messages}" "Installer" "Continuer"
                    retour=$?
                    if [[ $retour = 0 ]]; then
                        printf '%s\n' "${BGreen}Installation de ${BYellow}cpupower${BGreen}...${Reset}"
                        package_install "cpupower"
                        printf '%s\n' "${BGreen}Activation de ${BYellow}cpupower.service${BGreen}...${Reset}"
                        systemctl enable cpupower.service
                    fi
                    ;;
                "syslog-ng")
                    printf '%s\n' "${BGreen}Installation de ${BYellow}syslog-ng${BGreen}...${Reset}"
                    package_install "syslog-ng"
                    printf '%s\n' "${BGreen}Activation de ${BYellow}syslog-ng.service${BGreen}...${Reset}"
                    systemctl enable syslog-ng.service
                    printf '%s\n' "${BGreen}Ajout de ${BYellow}${USERNAME}${BGreen} au groupe ${BYellow}log${BGreen}...${Reset}"
                    gpasswd -a ${USERNAME} log
            esac
        done
        pause_function
    }
    #}}}
    # 18 DEVELOPEMENT {{{
    install_development_apps() {
    while true
    do
        print_title "APPLICATIONS DE DÉVELOPPEMENT"
        echo " 1) $(menu_item "kdevelop")"
        echo " 2) $(menu_item "qtcreator" "QtCreator Qt(5)")"
        echo " 3) $(menu_item "devtools")"
        echo " 4) $(menu_item "gdb" "Debugger Tools")"
        echo " 5) $(menu_item "git subversion")"
        echo " 6) $(menu_item "cmake")"
        echo " 7) $(menu_item "clang")"
        echo ""
        echo " F) FINI"
        echo ""
        DEVELOPMENT_OPTIONS+=" f"
        read_input_options "$DEVELOPMENT_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
            case "$OPT" in
                1)
                    package_install "kdevelop"
                    ;;
                2)
                    package_install "qtcreator qt qt5-doc libxkbcommon-x11"
                    ;;
                3)
                    package_install "devtools"
                    ;;
                4)
                    package_install "valgrind gdb splint tidyhtml"
                    ;;
                5)
                    package_install "git subversion"
                    ;;
                6)
                    package_install "cmake"
                    ;;
                7)
                    package_install "clang"
                    ;;
                "f")
                    break
                    ;;
                *)
                    invalid_option
                    ;;
            esac
        done
    elihw
    done
    }
    #}}}
    # 19 OFFICE {{{
    install_office_apps() {
    while true
    do
        print_title "APPLICATIONS DE BUREAUTIQUE"
        echo " 1) $(menu_item "libreoffice-still" "LibreOffice Still")"
        echo " 2) $(menu_item "calligra" "Calligra office suite")"
        echo ""
        echo " F) FINI"
        echo ""
        OFFICE_OPTIONS+=" f"
        read_input_options "$OFFICE_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
            case "$OPT" in
                1)
                    print_title "LIBREOFFICE - https://wiki.archlinux.org/index.php/LibreOffice"
                    package_install "libreoffice-still-$LANGUAGE_LO libreoffice-still libwpg unoconv"
                    package_install "hyphen-fr hyphen hunspell-fr hunspell mythes-fr libmythes"
                    ;;
                2)
                    package_install "calligra calligra-l10n-fr"
                    package_install "hyphen-fr hyphen hunspell-fr hunspell mythes-fr libmythes"
                    ;;
                "f")
                    break
                    ;;
                *)
                    invalid_option
                    ;;
            esac
        done
    elihw
    done
    }
    #}}}
    # 20 GRAPHICS {{{
    install_graphics_apps() {
    while true
    do
        print_title "APPLICATIONS GRAPHIQUES"
        echo " 1) $(menu_item "blender")"
        echo " 2) $(menu_item "gimp")"
        echo " 3) $(menu_item "inkscape")"
        echo ""
        echo " F) FINI"
        echo ""
        GRAPHICS_OPTIONS+=" f"
        read_input_options "$GRAPHICS_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
            case "$OPT" in
                1)
                    package_install "blender"
                    if [[ $IN_VIRTUAL_BOX -eq 0 ]]; then
                        is_package_installed "nvidia" && package_install "cuda opencl-nvidia"
                    fi
                    ;;
                2)
                    package_install "gimp libopenraw"
                    pacman -D --asdeps libopenraw
                    package_install "webkitgtk2 potrace gimp-ufraw gimp-plugin-fblur gimp-plugin-gmic gimp-plugin-lqr gimp-plugin-mathmap gimp-plugin-wavelet-decompose gimp-plugin-wavelet-denoise gimp-refocus"
                    ;;
                3)
                    package_install "inkscape uniconvertor"
                    ;;
                "f")
                    break
                    ;;
                *)
                    invalid_option
                    ;;
            esac
        done
    elihw
    done
    }
    #}}}
    # 21 INTERNET {{{
    install_internet_apps() {
    while true
    do
        print_title "BROWSER - DOWNLOAD/FILESHARE - EMAIL - INSTANT MESSAGING - IRC"
        echo " 1) $(menu_item "chromium")"
        echo " 2) $(menu_item "rekonq")"
        echo " 3) $(menu_item "firefox")"
        echo " 4) $(menu_item "opera")"
        echo " 5) $(menu_item "transmission-qt")"
        echo " 6) $(menu_item "dropbox") $AUR"
        echo " 7) $(menu_item "thunderbird")"
        echo " 8) $(menu_item "emesene")"
        echo " 9) $(menu_item "quassel")"
        echo "10) $(menu_item "konversation")"
        echo ""
        echo " F) FINI"
        echo ""
        BROWSERS_OPTIONS+=" f"
        read_input_options "$BROWSERS_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
            case "$OPT" in
                1)
                    package_install "chromium icedtea-web"
                    aur_package_install "chromium-pepper-flash"
                    ;;
                2)
                    package_install "rekonq icedtea-web"
                    ;;
                3)
                    package_install "firefox firefox-i18n-$LANGUAGE_FF firefox-adblock-plus icedtea-web"
#                    aur_package_install "firefox-extension-https-everywhere"
#                    aur_package_install "freshplayerplugin"
#                    aur_package_install "chromium-pepper-flash"
                    ;;
                4)
                    package_install "opera icedtea-web"
                    aur_package_install "chromium-pepper-flash"
                    ;;
                5)
                    package_install "transmission-qt"
                    ;;
                6)
                    aur_package_install "dropbox"
                    aur_package_install "kfilebox"
                    systemctl enable dropboxd.service
                    ;;
                7)
                    package_install "thunderbird thunderbird-i18n-$LANGUAGE_FF"
                    ;;
                8)
                    package_install "emesene"
                    ;;
                9)
                    package_install "quassel"
                    ;;
                10)
                    package_install "konversation"
                    ;;
                "f")
                    break
                    ;;
                *)
                    invalid_option
                    ;;
            esac
        done
    elihw
    done
    }
    #}}}
    # 22 AUDIO {{{
    install_audio_apps() {
    while true
    do
        print_title "APPLICATIONS AUDIO"
        echo " 1) $(menu_item "amarok")"
        echo " 2) $(menu_item "clementine")"
        echo " 3) $(menu_item "soundkonverter")"
        echo " 4) $(menu_item "audacity")"
        echo " 5) $(menu_item "gst-plugins-base" "Gstreamer")"
        echo ""
        echo " F) FINI"
        echo ""
        AUDIO_OPTIONS+=" f"
        read_input_options "$AUDIO_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
            case "$OPT" in
                1)
                    package_install "amarok"
                    ;;
                2)
                    package_install "clementine"
                    ;;
                3)
                    package_install "soundkonverter"
                    ;;
                4)
                    package_install "audacity"
                    ;;
                5)
                    package_install "gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav mpg123 flac"
                    package_install "libcanberra-gstreamer"
                    if is_package_installed "amarok banshee clementine exaile rhythmbox xfburn" ; then
                        package_install "gstreamer0.10 gstreamer0.10-plugins"
                    fi
                    ;;
                "f")
                    break
                    ;;
                *)
                    invalid_option
                    ;;
            esac
        done
    elihw
    done
    }
    #}}}
    # 23 VIDEO {{{
    install_video_apps() {
    while true
    do
        print_title "APPLICATIONS VIDEO"
        echo " 1) $(menu_item "vlc")"
        echo " 2) $(menu_item "kdenlive")"
        echo " 3) $(menu_item "libbluray libquicktime libdvdread libdvdnav libdvdcss libaacs cdrdao" "DVD Libs")"
        echo ""
        echo " F) FINI"
        echo ""
        VIDEO_OPTIONS+=" f"
        read_input_options "$VIDEO_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
            case "$OPT" in
                1)
                    package_install "vlc libdvdcss libva-vdpau-driver opus"
                    ;;
                2)
                    package_install "kdenlive"
                    ;;
                3)
                    package_install "libbluray libquicktime libdvdread libdvdnav libdvdcss libaacs cdrdao"
                    ;;
                "f")
                    break
                    ;;
                *)
                    invalid_option
                    ;;
            esac
        done
    elihw
    done
    }
    #}}}
    # 24 AUDIO-VIDEO {{{
    install_audio_video_apps() {
        while true
        do
            print_title "APPLICATIONS AUDIO/VIDEO POUR KDE5"
            echo " 1) $(menu_item "digikam")"
            echo " 2) $(menu_item "k3b")"
            echo ""
            echo " F) FINI"
            echo ""
            AUDIO_VIDEO_OPTIONS+=" f"
            read_input_options "$AUDIO_VIDEO_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
                case "$OPT" in
                    1)
                        package_install "digikam"
                        ;;
                    2)
                        package_install "k3b cdrdao dvd+rw-tools vcdimager transcode emovix cdparanoia"
                        ;;
                    "f")
                        break
                        ;;
                    *)
                        invalid_option
                        ;;
                esac
            done
        elihw
        done
    }
    #}}}
    # 25 GAMES {{{
    install_games() {
##
# A REVOIR jndqrami sur un repo perso
# TODO
##
    while true
    do
        print_title "JEUX"
        echo " 1) $(menu_item "pokerth" "Poker TH")"
        echo ""
        echo " F) FINI"
        echo ""
        GAME_OPTIONS+=" f"
        read_input_options "$GAME_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
            case "$OPT" in
                1)
                    package_install "pokerth"
                    ;;
                "f")
                    break
                    ;;
                *)
                    invalid_option
                    ;;
            esac
        done
    elihw
    done
    }
    #}}}
#}}}}
