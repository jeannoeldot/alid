#!/usr/bin/env bash

#-------------------------------------------------------------------------------
# ai-b-ic
#
# DANS CHROOT
#
# Ne fonctionne qu'avec la langue FR (fr_FR)
#
# Interface graphique avec whiptail

source $(pwd)/ai-commons

    # LECTURE DES VARIABLES {{{
    read_variables_ali_b1() {
        #/root/variables.ali
        if [[ -f "/root/variables.ali" ]]; then
            eval $(grep '^TYPE_KEYBOARD=' "/root/variables.ali")
            TYPE_KEYBOARD="${TYPE_KEYBOARD}"
            eval $(grep '^NAME_NET_WIRED=' "/root/variables.ali")
            NAME_NET_WIRED="${NAME_NET_WIRED}"
            eval $(grep '^IS_UEFI=' "/root/variables.ali")
            IS_UEFI="${IS_UEFI}"
            eval $(grep '^IN_VIRTUAL_BOX=' "/root/variables.ali")
            IN_VIRTUAL_BOX="${IN_VIRTUAL_BOX}"
            eval $(grep '^IS_HDD_OR_SSD=' "/root/variables.ali")
            IS_HDD_OR_SSD="${IS_HDD_OR_SSD}"
            eval $(grep '^TYPE_STORAGE_PARTITION=' "/root/variables.ali")
            TYPE_STORAGE_PARTITION="${TYPE_STORAGE_PARTITION}"
            eval $(grep '^ROOT_DEVICE=' "/root/variables.ali")
            ROOT_DEVICE="${ROOT_DEVICE}"
            eval $(grep '^ROOT=' "/root/variables.ali")
            ROOT="${ROOT}"
            eval $(grep '^ROOT_FS_TYPE=' "/root/variables.ali")
            ROOT_FS_TYPE="${ROOT_FS_TYPE}"
            eval $(grep '^IS_VAR_SEPARATE=' "/root/variables.ali")
            IS_VAR_SEPARATE="${IS_VAR_SEPARATE}"
            eval $(grep '^EFI_DEVICE=' "/root/variables.ali")
            EFI_DEVICE="${EFI_DEVICE}"
        else
            local messages=""
            local fonction="LECTURE FICHIER «variables.ali».\n"
            fonction+="================================\n\n"
            messages="${fonction}"
            messages+="/!\ ERREUR :\n"
            messages+="    Le fichier «variables.ali» n'existe pas.\n"
            messages+="    ARRÊT immédiat.\n"
            print_whiptail_msgbox "${messages}" "OK"
            exit 1
        fi
    }
    #}}}
    #CONFIGURE FSTAB {{{
    configure_fstab() {
        local retour=9
        local messages=""
        local messages_if=""
        local fonction="CONFIGURATION DU FICHIER «/etc/fstab».\n"
        fonction+="======================================\n\n"
        #
        if [[ ${TYPE_STORAGE_PARTITION} == "GPT" ]]; then
            local num_ligne_swap=$(grep -n "swap" "/etc/fstab" | cut -f1 -d:)
            if [[ "${num_ligne_swap}" != "" ]]; then
                messages_if+="Type de partition GPT : Ligne swap commentée.\n"
                sed -i "${num_ligne_swap}s/^UUID/#UUID/" /etc/fstab
            else
                messages_if+="Aucune partition de swap.\n"
            fi
        fi
        #
        if [[ ${IS_UEFI} = 1 ]]; then
            if [[ ${IS_HDD_OR_SSD} == "SSD" ]]; then
                local num_ligne_vfat=$(grep -n "vfat" "/etc/fstab" | cut -f1 -d:)
                if [[ "${num_ligne_vfat}" != "" ]]; then
                    messages_if+="UEFI et SSD : Options pour vfat : rw,relatime,discard.\n"
                    sed -i "${num_ligne_vfat}s/rw,relatime/rw,relatime,discard/" /etc/fstab
                fi
            fi
        fi
        #
        if [[ ${IS_HDD_OR_SSD} == "SSD" ]]; then
            # rotational = 0 ==> SSD
            # https://wiki.archlinux.org/index.php/Solid_State_Drives#TRIM
            messages="\n${fonction}"
            messages+="Activation du Trim (option discard ou service fstrim).\n"
            messages+="------------------------------------------------------\n\n"
            messages+="Configurer le TRIM en se basant sur :\n"
            REPLY=$(whiptail --nocancel --title "${TITRE_BOX_W}" --menu "${messages}" --ok-button "Valider" 20 72 5 \
                    "DISCARD" "TRIM par option de montage." \
                    "FSTRIM" "TRIM par service «fstrim»." \
                    3>&1 1>&2 2>&3)
            case "$REPLY" in
                "DISCARD")
                    messages_if+="SSD + TRIM : Options pour ext4 : defaults,relatime,discard.\n"
                    sed -i "s/rw,relatime,data=ordered/defaults,relatime,discard/g" /etc/fstab
                    ;;
                "FSTRIM")
                    messages_if+="SSD : Options pour ext4 : defaults,relatime.\n"
                    messages_if+="SSD + TRIM : Activation de fstrim.timer.\n"
                    sed -i "s/rw,relatime,data=ordered/defaults,relatime/g" /etc/fstab
                    systemctl enable fstrim.timer
                    ;;
            esac
        else
            # rotational = 1 ==> HDD
            messages_if+="HDD : Options pour ext4 : defaults,relatime.\n"
            sed -i "s/rw,relatime,data=ordered/defaults,relatime/g" /etc/fstab
        fi
        #
        messages="${fonction}"
        messages+="${messages_if}"
        print_whiptail_msgbox "${messages}" "Continuer"
        #
        messages="${fonction}"
        messages+="Visualiser/Editer le fichier «/etc/fstab» avec «"${EDITOR}"» ?\n"
        print_whiptail_yesno "${messages}" "Editer" "Continuer"
        retour=$?
        if [[ $retour = 0 ]]; then
            ${EDITOR} /etc/fstab
        fi
    }
    #}}}
    #CONFIGURE VCONSOLE.CONF {{{
    configure_vconsole_conf() {
        local retour=9
        local messages=""
        local fonction="CONFIGURATION DU FICHIER «/etc/vconsole.conf».\n"
        fonction+="==============================================\n\n"
        echo "KEYMAP=$KEYMAP" > /etc/vconsole.conf
#        echo "FONT=Lat2-Terminus16" >> /etc/vconsole.conf
        echo "FONT=lat9w-16" >> /etc/vconsole.conf
#        echo "FONT_MAP=8859-15_to_uni" >> /etc/vconsole.conf
        messages="${fonction}"
        messages+="Définition du type de clavier dans les consoles virtuelles.\n\n"
        messages+="Clavier : variable KEYMAP = "$KEYMAP"\n"
        messages+="Police  : variable FONT   = lat9w-16\n"
        print_whiptail_msgbox "${messages}" "Continuer"
        #
        messages="${fonction}"
        messages+="Visualiser/Editer le fichier «/etc/vconsole.conf» avec «"${EDITOR}"» ?\n"
        print_whiptail_yesno "${messages}" "Editer" "Continuer"
        retour=$?
        if [[ $retour = 0 ]]; then
            ${EDITOR} /etc/vconsole.conf
        fi           
    }
    #}}}
    #CONFIGURE PACMAN.CONF {{{
    configure_pacman_conf() {
        #ADD COLOR TO PACMAN.CONF
        local messages=""
        local fonction="CONFIGURATION DU FICHIER «/etc/pacman.conf».\n"
        fonction+="===========================================\n\n"
        messages="${fonction}"
        messages+="Activation de l'option «color».\n\n"
        print_whiptail_msgbox "${messages}" "Continuer"
        sed -i "/^#Color/c\Color" /etc/pacman.conf
    }
    #}}}
    #CONFIGURE HOSTNAME {{{
    configure_hostname() {
        local retour=9
        local messages=""
        local fonction="CONFIGURATION DU FICHIER «/etc/hostname».\n"
        fonction+="=========================================\n\n"
        messages="\n${fonction}"
        messages+="Entrer un nom d'hôte pour identifier la machine :\n"
        until [[ $retour = 0 ]];
            do
                L_HN=$(whiptail --nocancel --title "${TITRE_BOX_W}" --inputbox "${messages}" --ok-button "Valider" 16 72 myarch 3>&1 1>&2 2>&3)
                if [[ ${L_HN} == "" ]]; then
                    retour=9
                else
                    retour=0
                fi
            done
        echo "$L_HN" > /etc/hostname
        retour=9
        messages="${fonction}"
        messages+="Visualiser/Editer le fichier «/etc/hostname» avec «"${EDITOR}"» ?\n"
        print_whiptail_yesno "${messages}" "Editer" "Continuer"
        retour=$?
        if [[ $retour = 0 ]]; then
            ${EDITOR} /etc/hostname
        fi
        #
        # Lire valeur hostname ds L_HN
        L_HN=$(cat /etc/hostname | awk '{print $1}')
        # Ecrire la valeur hostname dans /etc/hosts
        sed -i "/127.0.0.1/s/$/ ${L_HN}/" /etc/hosts
        sed -i "/::1/s/$/ ${L_HN}/" /etc/hosts
        retour=9
        fonction="MODIFICATION DU FICHIER «/etc/hosts».\n"
        fonction+="=====================================\n\n"
        messages="${fonction}"
        messages+="Nom d'hôte choisi : "${L_HN}"\n\n"
        messages+="Visualiser le fichier «/etc/hosts» avec «"${EDITOR}"» ?\n"
        print_whiptail_yesno "${messages}" "Visualiser" "Continuer"
        retour=$?
        if [[ $retour = 0 ]]; then
            ${EDITOR} /etc/hosts
        fi
    }
    #}}}
    #CONFIGURE TIMEZONE {{{
    configure_timezone() {
        local messages=""
        local fonction="CONFIGURATION DU FICHIER «/etc/localtime».\n"
        fonction+="==========================================\n\n"
        messages="${fonction}"
        messages+="Le fuseau horaire sélectionné est : "${FR_ZONE}"/"${FR_SUBZONE}".\n\n"
        print_whiptail_msgbox "${messages}" "Continuer"
        ZONE=${FR_ZONE}
        SUBZONE=${FR_SUBZONE}
        clear
        printf '%s\n' "${BGreen}Création lien symbolique ${BYellow}${ZONE}/${SUBZONE}${BGreen}...${Reset}"
        ln -sf /usr/share/zoneinfo/${ZONE}/${SUBZONE} /etc/localtime
    }
    #}}}
    #CONFIGURE HARDWARECLOCK {{{
    configure_hardwareclock() {
        local messages=""
        local fonction="CONFIGURATION DE L'HEURE MATERIELLE.\n"
        fonction+="====================================\n\n"
        messages="${fonction}"
        messages+="Le mode horloge matérielle sélectionné est : UTC.\n\n"
        print_whiptail_msgbox "${messages}" "Continuer"
        clear
        printf '%s\n' "${BGreen}Configuration de l'horloge matérielle en ${BYellow}UTC${BGreen}...${Reset}"
        hwclock --systohc --utc
    }
    #}}}
    #CONFIGURE LOCALE {{{
    configure_locale() {
        local retour=9
        local messages=""
        local fonction="CONFIGURATION DU FICHIER «/etc/locale.conf».\n"
        fonction+="============================================\n\n"
        messages="${fonction}"
        messages+="Définition de la langue utilisée dans le système.\n\n"
        messages+="La langue locale sélectionnée est : "${FR_LOCALE}".\n"
        print_whiptail_msgbox "${messages}" "Continuer"
        LOCALE=${FR_LOCALE}
        LOCALE_8859="$LOCALE ISO-8859"
        LOCALE_UTF8="$LOCALE.UTF-8"
        echo "LANG=${LOCALE_UTF8}" > /etc/locale.conf
        echo "LC_COLLATE=C" >> /etc/locale.conf
        messages="${fonction}"
        messages+="Visualiser/Editer le fichier «/etc/locale.conf» avec «"${EDITOR}"» ?\n"
        print_whiptail_yesno "${messages}" "Editer" "Continuer"
        retour=$?
        if [[ $retour = 0 ]]; then
            ${EDITOR} /etc/locale.conf
        fi
        #
        printf '%s\n' "${BGreen}Génération de la langue locale utilisée ${BYellow}${LOCALE}${BGreen}...${Reset}"
        sed -i "/${LOCALE}/s/^#//" /etc/locale.gen
        locale-gen
    }
    #}}}
    #CONFIGURE MKINITCPIO {{{
    configure_mkinitcpio() {
        local retour=9
        local messages=""
        local fonction="CONFIGURATION DU FICHIER «/etc/mkinitcpio.conf».\n"
        fonction+="================================================\n\n"
        messages="${fonction}"
        # Remplace udev par systemd. Rajoute keymap
        messages+="HOOKS : Remplacement de udev par systemd.\n"
        messages+="        Ajout de keymap.\n"
        # lecture ligne HOOKS=
        local contenu_hooks=$(sed -n "/^HOOKS=/p" /etc/mkinitcpio.conf)
        # Commente la ligne HOOKS= originale
        sed -i "/^HOOKS=/i\#${contenu_hooks}" /etc/mkinitcpio.conf
        # Inscrit modifs
        if [[ $IS_VAR_SEPARATE = 1 ]]; then
            messages+="HOOKS : Ajout de shutdown car partition /var séparée.\n\n"
            sed -i "/^HOOKS=/s/base udev/base systemd/g;/^HOOKS=/s/keyboard fsck/keyboard keymap fsck shutdown/g" /etc/mkinitcpio.conf
        else
            messages+="\n"
            sed -i "/^HOOKS=/s/base udev/base systemd/g;/^HOOKS=/s/keyboard fsck/keyboard keymap fsck/g" /etc/mkinitcpio.conf
        fi
        # COMPRESSION="cat" (PAS DE COMPRESSION)
        messages+="COMPRESSION : Ajout de COMPRESSION=\"cat\" (PAS de Compression)\n"
        sed -i "/^#COMPRESSION=\"gzip\"/i\COMPRESSION=\"cat\"" /etc/mkinitcpio.conf
        print_whiptail_msgbox "${messages}" "Continuer"
        #
        messages="${fonction}"
        messages+="Visualiser/Editer le fichier «/etc/mkinitcpio.conf» avec «"${EDITOR}"» ?\n"
        print_whiptail_yesno "${messages}" "Editer" "Continuer"
        retour=$?
        if [[ $retour = 0 ]]; then
            ${EDITOR} /etc/mkinitcpio.conf
        fi
        clear
        printf '%s\n' "${BGreen}Génération de ${BYellow}vmlinuz-linux initramfs-linux.img initramfs-linux-fallback.img${BGreen}...${Reset}"
        mkinitcpio -p linux
    }
    #}}}
    # ai-b-bios-ic ou ai-b-uefi-ic
    #}}}
    #NETWORK {{{
    configure_network() {
        local messages=""
        local fonction="CONFIGURATION DU RESEAU ETHERNET AVEC DHCPCD.\n"
        fonction+="============================================\n\n"
        messages="${fonction}"
        messages+="Le nom de l'interface réseau est : "${NAME_NET_WIRED}"\n\n"
        messages+="Ajout de l'option «noarp» à etc/dhcpcd.conf.\n"
        print_whiptail_msgbox "${messages}" "Continuer"
        #
        clear
        echo "noarp" >> /etc/dhcpcd.conf
        printf '%s\n' "${BGreen}Création du fichier ${BYellow}/etc/resolv.conf.head${BGreen}...${Reset}"
        cp -v ai-fconfig/net-ip-statique/resolv.conf.head /etc/resolv.conf.head
        # Enable toutes les interfaces réseaux par défaut
        printf '%s\n' "${BGreen}Activation du service ${BYellow}dhcpcd.service${BGreen}...${Reset}"
#       systemctl enable dhcpcd@${NAME_NET_WIRED}.service
        systemctl enable dhcpcd.service
    }
    #}}}
    #ROOT PASSWORD {{{
    set_root_password() {
        local retour=9
        local messages=""
        local messages_chk=""
        local fonction="MOT DE PASSE ROOT.\n"
        fonction+="=================\n\n"
        until [[ $retour = 0 ]];
            do
                messages="\n${fonction}"
                messages+="Entrer le mot de passe «root» :\n"
                messages_chk="\n${fonction}"
                messages_chk+="Confirmer le mot de passe «root» :\n"
                L_MDP=$(whiptail --nocancel --title "${TITRE_BOX_W}" --passwordbox "${messages}" --ok-button "Valider" 16 72 3>&1 1>&2 2>&3)
                L_MDP_CHK=$(whiptail --nocancel --title "${TITRE_BOX_W}" --passwordbox "${messages_chk}" --ok-button "Valider" 16 72 3>&1 1>&2 2>&3)
                if [[ ${L_MDP} == ${L_MDP_CHK} ]]; then
                    retour=0
                else
                    messages="\n${fonction}"
                    messages+="/!\ Mot de passe «root» erroné :\n"
                    messages+="/!\ Entrer de nouveau le mot de passe «root»."
                    print_whiptail_msgbox "${messages}" "Recommencer"
                    retour=9
                fi
            done
        #
        clear
        printf '%s\n' "${BGreen}Configure le mot de passe «${BYellow}root${BGreen}» :${Reset}"
        echo -e "${L_MDP}\n${L_MDP}" > /tmp/.passwd
        passwd root < /tmp/.passwd
        rm -f /tmp/.passwd
#         # OU
#         echo -e "${L_MDP}\n${L_MDP}\n" | passwd root
    }
    #}}}

# ARCHLINUX INSTALL SCRIPTS - https://github.com/jeannoeldot/arch_install/ai-b-ic
    messages_p2=""
    fonction="INSTALLATION PARTIE 2 DANS CHROOT.\n"
    fonction+="==================================\n\n"
    messages_p2="${fonction}"
    messages_p2+="Mise à jour de la base de pacman.\n"
    print_whiptail_msgbox "${messages_p2}" "Continuer"
    clear
    printf '%s\n' "${BGreen}Mise à jour de la base de pacman...${Reset}"
    pacman-db-upgrade
    #
    read_variables_ali_b1
    # Sets the interval of inactivity
    setterm -blank 0
    # Sets keymap et font
    if [[ $TYPE_KEYBOARD == "AZERTY" ]]; then
        KEYMAP=fr-latin9
    else
        KEYMAP=fr-bepo-latin9
    fi
    messages_p2="${fonction}"
    messages_p2+="Configure le clavier et la police :\n\n"
    messages_p2+="Type de clavier  : "${TYPE_KEYBOARD}"\n"
    messages_p2+="Valeur de KEYMAP : "${KEYMAP}"\n"
#     messages_p2+="Police           : Lat2-Terminus16\n"
    messages_p2+="Police           : lat9w-16\n"
    print_whiptail_msgbox "${messages_p2}" "Continuer"
    loadkeys $KEYMAP
#    setfont Lat2-Terminus16
    setfont lat9w-16
    #
    messages_p2="${fonction}"
    # Editeur par défaut
    messages_p2+="L'éditeur par défaut est : nano\n"
    # UEFI ou BIOS
    if [[ $IS_UEFI = 1 ]]; then
        messages_p2+="Installation en mode     : UEFI\n"
        source $(pwd)/ai-b-uefi-ic
    else
        messages_p2+="Installation en mode     : BIOS\n"
        source $(pwd)/ai-b-bios-ic
    fi
    # Installation dans VirtualBox ou réelle
    if [[ $IN_VIRTUAL_BOX = 1 ]]; then
        messages_p2+="Installation dans        : Oracle VM VirtualBox\n"
    else
        messages_p2+="Installation dans        : PC Réel\n"
    fi
    print_whiptail_msgbox "${messages_p2}" "Continuer"
    #
    configure_fstab
    configure_vconsole_conf
    configure_pacman_conf
    configure_hostname
    configure_timezone
    configure_hardwareclock
    configure_locale
    configure_mkinitcpio
    # ai-b-bios-ic ou ai-b-uefi-ic
    install_bootloader
    configure_bootloader
    #
    configure_network
    set_root_password
    # INSCRIT CHOIX CLAVIER DANS variables_pour_ai_de.txt pour ai-de
    echo "type_choice_keyboard=${TYPE_KEYBOARD}" > /root/variables_pour_ai_de.txt
    #
    messages_p2="FIN INSTALLATION PARTIE 2 DANS CHROOT.\n"
    messages_p2+="======================================\n\n"
    messages_p2+="Commandes à éxécuter dans l'ordre pour poursuivre l'installation :\n\n"
    messages_p2+="exit                             => Quitte l'environnement Chroot\n"
    messages_p2+="cd ai && ./ai-b                  => Partie 3 de l'installation\n"
    print_whiptail_msgbox "${messages_p2}" "Continuer"
    #
    exit 0
