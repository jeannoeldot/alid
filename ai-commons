#!/usr/bin/env bash

#-------------------------------------------------------------------------------
# ai-commons
# Fonctions communes aux différents scripts
#
# ne fonctionne qu'avec la langue FR (fr_FR)
# Created by me for me
#
# Interface graphique avec dialog

# CONSTANTES {{{
# TITRE BOITES DE DIALOG dialog
TITRE_BOX_W_DATE="12/12/2017"
TITRE_BOX_W_VERSION="V 1.4.8"
TITRE_BOX_W_TEXTE="INSTALLATION DE ARCH LINUX"
TITRE_BOX_W="${TITRE_BOX_W_TEXTE} ${TITRE_BOX_W_VERSION} DU ${TITRE_BOX_W_DATE}"

# FUSEAU HORAIRE
FR_ZONE=Europe
FR_SUBZONE=Paris
# HEURE MATÉRIELLE
FR_HEURE=utc
# LOCALE
FR_LOCALE=fr_FR
#}}}

# VARIABLES {{{
CHOIX_PARTITIONS=""

# NOM DU REPERTOIRE D'INSTALLATION DE LA 1ERE ARCH EN UEFI
NAME_ARCH_FIRST="arch_1"
# NUMÉRO DE L'INSTALLATION DE ARCH EN UEFI
NUMBER_OF_ARCH=0
# NOM DU REPERTOIRE D'INSTALLATION EN UEFI
NAME_DIR_ARCHLINUX=""
# NOM DU MANAGER DE BOOT
MGR_EFI=""
# TYPE DE CLAVIER ( AZERTY ou BEPO )
TYPE_KEYBOARD=""
# sudo : timestamp_timeout = 20 minutes
TIMESTAMP_TIMEOUT=20
#
IS_MULTI_BOOT_UEFI=0
IS_Z87C=0
IN_VIRTUAL_BOX=0
IS_UEFI=0
IS_HDD_OR_SSD=""
TYPE_STORAGE_PARTITION=""
IS_VAR_SEPARATE=0
#}}}

# MAIN MENU {{{
checklist=( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 )
#}}}
# COLORS {{{
Bold=$(tput bold)
Underline=$(tput sgr 0 1)
Reset=$(tput sgr0)
# Regular Colors
Red=$(tput setaf 1)
Green=$(tput setaf 2)
Yellow=$(tput setaf 3)
Blue=$(tput setaf 4)
Purple=$(tput setaf 5)
Cyan=$(tput setaf 6)
White=$(tput setaf 7)
# Bold
BRed=${Bold}$(tput setaf 1)
BGreen=${Bold}$(tput setaf 2)
BYellow=${Bold}$(tput setaf 3)
BBlue=${Bold}$(tput setaf 4)
BPurple=${Bold}$(tput setaf 5)
BCyan=${Bold}$(tput setaf 6)
BWhite=${Bold}$(tput setaf 7)
#}}}
# DESKTOP ENVIRONMENT {{{
E17=0
GNOME=0
KDE5=0
LXDE=0
OPENBOX=0
XFCE=0
#}}}
# EDITOR {{{
EDITOR=nano
#}}}
# ARCHITECTURE {{{
ARCHI=$(uname -m)
#}}}
# CURRENT DIRECTORY
AUI_DIR=$(pwd)
MOUNTPOINT="/mnt"
#}}}
# MES FONCTIONS EN PLUS {{{
# LECTURE DU NOM DU REPERTOIRE D'INSTALLATION SI EN UEFI
read_name_dir_archlinux() { #{{{
    # Par défaut, nom du rep = arch_1. NAME_ARCH_FIRST="arch_1"
    NAME_DIR_ARCHLINUX=${NAME_ARCH_FIRST}
    if [[ -f "/root/name_dir_archlinux.uefi" ]]; then
        eval $(grep '^name_dir_archlinux=' "/root/name_dir_archlinux.uefi")
        if [[ -n "${name_dir_archlinux}" ]]; then
            NAME_DIR_ARCHLINUX="${name_dir_archlinux}"
        fi
    fi
    if [[ $NAME_DIR_ARCHLINUX == ${NAME_ARCH_FIRST} ]]; then
        IS_MULTI_BOOT_UEFI=0
    else
        IS_MULTI_BOOT_UEFI=1
    fi
} #}}}
# LECTURE DU NOM DU MANAGER DE BOOT SI EN UEFI
read_name_mgr_efi() { #{{{
    # Par défaut, nom du manager = vide
    MGR_EFI=""
    if [[ -f "/root/name_dir_archlinux.uefi" ]]; then
        eval $(grep '^name_mgr_efi=' "/root/name_dir_archlinux.uefi")
        if [[ -n "${name_mgr_efi}" ]]; then
            MGR_EFI="${name_mgr_efi}"
        fi
    fi
} #}}}
# LECTURE DU TYPE DE CLAVIER
read_name_type_keyboard() { #{{{
    # Par défaut, type de clavier = AZERTY
    TYPE_KEYBOARD="AZERTY"
    if [[ -f "/root/variables_pour_ai_de.txt" ]]; then
        eval $(grep '^type_choice_keyboard=' "/root/variables_pour_ai_de.txt")
        if [[ -n "${type_choice_keyboard}" ]]; then
            TYPE_KEYBOARD="${type_choice_keyboard}"
        fi
    fi
} #}}}
# # TEST SI CM = ASUS All Series/Z87-C
# OUI ==> IS_Z87C=1
# NON ==> IS_Z87C=0
# check_is_cm_asus_z87c() { #{{{
#     local z87c=$(journalctl -b | grep -E "DMI:")
#     echo ${z87c} | tr "[:upper:]" "[:lower:]" | grep -q z87-c
#     if (( $? == 0 )); then
#         IS_Z87C=1
#     else
#         IS_Z87C=0
#     fi
# } #}}}
# DANS VIRTUALBOX OU NON
# OUI ==> IN_VIRTUAL_BOX=1
# NON ==> IN_VIRTUAL_BOX=0
check_is_in_virtualbox() { #{{{
    local vbox=$(journalctl -b | grep -E "DMI:")
    echo ${vbox} | tr "[:upper:]" "[:lower:]" | grep -q virtualbox
    if (( $? == 0 )); then
        IN_VIRTUAL_BOX=1
    else
        IN_VIRTUAL_BOX=0
    fi
} #}}}
# IS UEFI OR BIOS
# UEFI ==> IS_UEFI=1
# BIOS ==> IS_UEFI=0
check_is_uefi_or_bios() { #{{{
    if [[ -d "/sys/firmware/efi" ]]; then
        IS_UEFI=1
    else
        IS_UEFI=0
    fi
} #}}}
# IS HDD OR SSD
# $1 = HDD_DEVICE
check_is_hdd_or_ssd() { #{{{
    local name_device=$(echo $1 | sed 's/\/dev\///')
    local rotational=$(cat /sys/block/$name_device/queue/rotational)
    if (( $rotational == 1 )); then
        # rotational = 1 ==> HDD
        IS_HDD_OR_SSD="HDD"
    else
        # rotational = 0 ==> SSD
        IS_HDD_OR_SSD="SSD"
    fi
} #}}}
# DIALOG COLORS {{{
Bold_dlg="\Zb"
Reverse_dlg="\Zr"
Reset_dlg="\Zn"
# Regular Colors
black_dlg="\Z0"
red_dlg="\Z1"
green_dlg="\Z2"
yellow_dlg="\Z3"
blue_dlg="\Z4"
magenta_dlg="\Z5"
cyan_dlg="\Z6"
white_dlg="\Z7"
# Bold
Bblack_dlg="${Bold_dlg}${black_dlg}"
Bred_dlg="${Bold_dlg}${red_dlg}"
Bgreen_dlg="${Bold_dlg}${green_dlg}"
Byellow_dlg="${Bold_dlg}${yellow_dlg}"
Bblue_dlg="${Bold_dlg}${blue_dlg}"
Bmagenta_dlg="${Bold_dlg}${magenta_dlg}"
Bcyan_dlg="${Bold_dlg}${cyan_dlg}"
Bwhite_dlg="${Bold_dlg}${white_dlg}"
# Bold Reverse
BRred_dlg="${Bold_dlg}${red_dlg}${Reverse_dlg}"
BRcyan_dlg="${Bold_dlg}${cyan_dlg}${Reverse_dlg}"
BRwhite_dlg="${Bold_dlg}${white_dlg}${Reverse_dlg}"
#}}}
#
# AFFICHE UNE MESSAGE BOX DIALOG
# $1 = titre
# $2 = message
# $3 = texte bouton OK
print_dialog_msgbox() { #{{{
    dialog --colors --backtitle "${TITRE_BOX_W}" --title "${1}" --ok-label "${3}" --msgbox "${2}" 16 72
} #}}}
# AFFICHE UNE MESSAGE BOX DIALOG HAUTE
# $1 = titre
# $2 = message
# $3 = texte bouton OK
# $4 = hauteur
print_dialog_msgbox_h() { #{{{
    dialog --colors --backtitle "${TITRE_BOX_W}" --title "${1}" --ok-label "${3}" --msgbox "${2}" $4 72
} #}}}
# AFFICHE UNE YESNO BOX DIALOG
# $1 = titre
# $2 = message
# $3 = texte bouton YES
# $4 = texte bouton NO
print_dialog_yesno() { #{{{
    dialog --colors --backtitle "${TITRE_BOX_W}" --title "${1}" --yes-label "${3}" --no-label "${4}" --yesno "${2}" 16 72
} #}}}
# AFFICHE UNE YESNO BOX DIALOG DEFAUT = NO
# $1 = titre
# $2 = message
# $3 = texte bouton YES
# $4 = texte bouton NO
print_dialog_yesno_no() { #{{{
    dialog --colors --defaultno --backtitle "${TITRE_BOX_W}" --title "${1}" --yes-label "${3}" --no-label "${4}" --yesno "${2}" 16 72
} #}}}
#}}}
# SUPPORT FUNCTIONS {{{
read_input_text() { #{{{
    # Par défaut : Oui
    read -p "$1 [O/n]: " OPTION
    echo ""
    OPTION=$(echo "$OPTION" | tr '[:upper:]' '[:lower:]')
    if [[ $OPTION != o && $OPTION != n ]]; then
        OPTION=o
    fi
} #}}}
print_line() { #{{{
    printf "%$(tput cols)s\n"|tr ' ' '-'
} #}}}
start_module() { #{{{
    modprobe $1
} #}}}
add_module() { #{{{
    for MODULE in $1; do
      [[ $# -lt 2 ]] && MODULE_NAME="$MODULE" || MODULE_NAME="$2";
      echo "$MODULE" >> /etc/modules-load.d/$MODULE_NAME.conf
      start_module "$MODULE"
    done
} #}}}
is_package_installed() { #{{{
  #check if a package is already installed
  for PKG in $1; do
    pacman -Q $PKG &> /dev/null && return 0;
  done
  return 1
} #}}}
aur_package_install() { #{{{
    #install package from aur
    for PACKAGE in $1; do
        if ! is_package_installed "${PACKAGE}" ; then
            su - ${USERNAME} -c "${AUR_HELPER} --noconfirm -S ${PACKAGE}"
            #RECHECK #{{{
            #check if the package wasnt installed
            if ! is_package_installed "${PACKAGE}" ; then
                read_input_text "Paquet ${PACKAGE} NON installé, essayer de l'installer encore?"
                [[ $OPTION == o ]] && su - ${USERNAME} -c "${AUR_HELPER} -S ${PACKAGE}"
            fi
            #}}}
        else
            echo -e "ATTENTION: ${PACKAGE} est à jour --passé"
        fi
    done
} #}}}
aui_download_packages() { #{{{
    for PACKAGE in $1; do
        #exec command as user instead of root
        su - ${USERNAME} -c "
        [[ ! -d aui_packages ]] && mkdir aui_packages
        cd aui_packages
        curl -o ${PACKAGE}.tar.gz https://aur.archlinux.org/cgit/aur.git/snapshot/${PACKAGE}.tar.gz
        tar zxvf ${PACKAGE}.tar.gz
        rm ${PACKAGE}.tar.gz
        cd ${PACKAGE}
        makepkg -si --noconfirm
        "
    done
} #}}}
package_install() { #{{{
    #install packages using pacman
    pacman -Syu --needed ${1}
    #check if the package wasnt installed
    if ! is_package_installed "$1" ; then
        read_input_text "Paquet $1 NON installé. Continuer?"
    fi
} #}}}
package_remove() { #{{{
    #remove package
    pacman -Rcsn ${1}
} #}}}
pause_function() { #{{{
    print_line
    printf '%s' "${BGreen}"
    read -e -sn 1 -p "Appuyer sur une touche pour continuer..."
    printf '%s\n' "${Reset}"
} #}}}
#}}}
