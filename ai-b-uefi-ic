#!/usr/bin/env bash

#-------------------------------------------------------------------------------
# ai-b-uefi-ic
# Appelé par ai-b-ic
#
# Script d'installation en mode UEFI
# Ne fonctionne qu'avec la langue FR (fr_FR)
#
# Interface graphique avec whiptail
#
#-------------------------------------------------------------------------------

    #INSTALL BOOTLOADER {{{
    install_bootloader() {
        local messages=""
        local fonction="PROCESSUS DE BOOT : INSTALLATION DE rEFInd.\n"
        fonction+="===========================================\n\n"
        messages="${fonction}"
        # Achitecture du PC
        if [[ $ARCHI == i686 ]]; then
            ARCHI_REFIND="ia32"
        else
            ARCHI_REFIND="x64"
        fi
        #
        # Détermine le nom du rep d'installation de arch
        if [[ -d /boot/efi/EFI ]]; then
            number_of_arch_first=$(ls "/boot/efi/EFI/" | grep -E "arch" | awk 'length($0)<7' | wc -l)
            if [[ $number_of_arch_first = 0 ]]; then
                NAME_DIR_ARCHLINUX=${NAME_ARCH_FIRST}
                NUMBER_OF_ARCH=1
                IS_MULTI_BOOT_UEFI=0
            else
                digit_of_arch_after=$(( $number_of_arch_first + 1 ))
                NAME_DIR_ARCHLINUX="arch_${digit_of_arch_after}"
                NUMBER_OF_ARCH=${digit_of_arch_after}
                IS_MULTI_BOOT_UEFI=1
            fi
        else
            NAME_DIR_ARCHLINUX=${NAME_ARCH_FIRST}
            NUMBER_OF_ARCH=1
            IS_MULTI_BOOT_UEFI=0
        fi
        DIR_EFI_ARCHLINUX="/boot/efi/EFI/${NAME_DIR_ARCHLINUX}"
        messages+="!!! Le répertoire d'installation de Arch Linux est :\n"
        messages+="    "${DIR_EFI_ARCHLINUX}"\n\n"
        # INSCRIT NAME_DIR_ARCHLINUX DANS name_dir_archlinux.uefi pour ai-de
        echo "name_dir_archlinux=${NAME_DIR_ARCHLINUX}" > /root/name_dir_archlinux.uefi
        #
        # Nom du Manager de Boot
        if [[ $IN_VIRTUAL_BOX = 1 ]]; then
            messages+="!!! Installation dans Oracle VM VirtualBox :\n"
            messages+="    Le nom du Manager de Boot est : boot${ARCHI_REFIND}.efi\n\n"
            MGR_EFI="boot"
            NAME_DIR_EFI="/boot/efi/EFI/BOOT"
            NAME_DIR_MGR_EFI="/EFI/BOOT/boot${ARCHI_REFIND}.efi"
        else
            messages+="!!! Installation dans PC Réel :\n"
            messages+="    Le nom du Manager de Boot est : refind_${ARCHI_REFIND}.efi\n\n"
            MGR_EFI="refind"
            NAME_DIR_EFI="/boot/efi/EFI/refind"
            NAME_DIR_MGR_EFI="/EFI/refind/refind_${ARCHI_REFIND}.efi"
        fi
        messages+="!!! Le répertoire d'installation du Manager de Boot est :\n"
        messages+="    "${NAME_DIR_EFI}"\n"
        # INSCRIT CHOIX NOM DANS name_dir_archlinux.uefi pour ai-de
        echo "name_mgr_efi=${MGR_EFI}" >> /root/name_dir_archlinux.uefi
        whiptail --title "${TITRE_BOX_W}" --msgbox "${messages}" --ok-button "Continuer" 22 72
        #
        # Installation de rEFInd
        printf '%s\n' "${BGreen}Installation de ${BYellow}rEFInd${BGreen}...${Reset}"
        pacman -Syu refind-efi
        # Kernels
        messages="${fonction}"
        messages+="Copie des fichiers du kernel dans «${DIR_EFI_ARCHLINUX}» :\n"
        messages+="- vmlinuz-linux --> vmlinuz-${NAME_DIR_ARCHLINUX}.efi\n"
        messages+="- initramfs-linux.img --> initramfs-${NAME_DIR_ARCHLINUX}.img\n"
        messages+="- initramfs-linux-fallback.img --> initramfs-${NAME_DIR_ARCHLINUX}-fallback.img\n"
        if [[ $IN_VIRTUAL_BOX = 0 ]]; then
			messages+="- intel-ucode.img --> intel-ucode.img\n\n"
		else
			messages+="\n\n"
        fi
        messages+="Copie du fichier de configuration du kernel :\n"
        messages+="- refind_linux.conf-sample --> refind_linux.conf\n"
        whiptail --title "${TITRE_BOX_W}" --msgbox "${messages}" --ok-button "Continuer" 22 72
        printf '%s\n' "${BGreen}Copie des fichiers du kernel (EFISTUB)...${Reset}"
        # CREATION arch_x
        mkdir -p ${DIR_EFI_ARCHLINUX}
        cp -v /boot/vmlinuz-linux ${DIR_EFI_ARCHLINUX}/vmlinuz-${NAME_DIR_ARCHLINUX}.efi
        cp -v /boot/initramfs-linux.img ${DIR_EFI_ARCHLINUX}/initramfs-${NAME_DIR_ARCHLINUX}.img
        cp -v /boot/initramfs-linux-fallback.img ${DIR_EFI_ARCHLINUX}/initramfs-${NAME_DIR_ARCHLINUX}-fallback.img
        if [[ $IN_VIRTUAL_BOX = 0 ]]; then
            printf '%s\n' "${BGreen}Copie du fichier de intel-ucode...${Reset}"
            cp -v /boot/intel-ucode.img ${DIR_EFI_ARCHLINUX}/intel-ucode.img
        fi
        printf '%s\n' "${BGreen}Copie du fichier de configuration du kernel (EFISTUB)...${Reset}"
        cp -v /usr/share/refind/refind_linux.conf-sample ${DIR_EFI_ARCHLINUX}/refind_linux.conf
        # rEFInd : si 1ere installation
        messages="${fonction}"
        if [[ $IS_MULTI_BOOT_UEFI = 0 ]]; then
            messages+="Copie des fichiers d'installation de rEFInd :\n"
            messages+="- refind_${ARCHI_REFIND}.efi --> /boot/efi${NAME_DIR_MGR_EFI}\n"
            messages+="- refind.conf-sample --> ${NAME_DIR_EFI}/refind.conf\n"
            messages+="- icons --> ${NAME_DIR_EFI}/icons\n"
            messages+="- os_arch_${NUMBER_OF_ARCH}.png --> ${NAME_DIR_EFI}/icons/os_arch_${NUMBER_OF_ARCH}.png\n"
        else
            messages+="MULTI BOOT UEFI : Pas d'installation de rEFInd.\n\n"
            messages+="- os_arch_${NUMBER_OF_ARCH}.png --> ${NAME_DIR_EFI}/icons/os_arch_${NUMBER_OF_ARCH}.png\n"
        fi
        print_whiptail_msgbox "${messages}" "Continuer"
        if [[ $IS_MULTI_BOOT_UEFI = 0 ]]; then
            printf '%s\n' "${BGreen}Copie des fichiers d'installation de rEFInd...${Reset}"
            mkdir -p ${NAME_DIR_EFI}
            cp -v /usr/share/refind/refind_${ARCHI_REFIND}.efi /boot/efi${NAME_DIR_MGR_EFI}
            cp -v /usr/share/refind/refind.conf-sample ${NAME_DIR_EFI}/refind.conf
            # Installe icones
            cp -R /usr/share/refind/icons ${NAME_DIR_EFI}/icons
            printf '%s\n' "${BGreen}Copie des icones os_arch_${NUMBER_OF_ARCH}.png et os_arch_${NUMBER_OF_ARCH}_ck.png...${Reset}"
            cp -v ai-fconfig/refind-icones/os_arch_${NUMBER_OF_ARCH}.png ${NAME_DIR_EFI}/icons/os_arch_${NUMBER_OF_ARCH}.png
            cp -v ai-fconfig/refind-icones/os_arch_${NUMBER_OF_ARCH}_ck.png ${NAME_DIR_EFI}/icons/os_arch_${NUMBER_OF_ARCH}_ck.png
        else
            printf '%s\n' "${BGreen}MULTI BOOT UEFI : Pas d'installation de rEFInd...${Reset}"
            printf '%s\n' "${BGreen}Copie des icones os_arch_${NUMBER_OF_ARCH}.png et os_arch_${NUMBER_OF_ARCH}_ck.png...${Reset}"
            # Installe icones
            cp -v ai-fconfig/refind-icones/os_arch_${NUMBER_OF_ARCH}.png ${NAME_DIR_EFI}/icons/os_arch_${NUMBER_OF_ARCH}.png
            cp -v ai-fconfig/refind-icones/os_arch_${NUMBER_OF_ARCH}_ck.png ${NAME_DIR_EFI}/icons/os_arch_${NUMBER_OF_ARCH}_ck.png
        fi
        pause_function
    }
    #}}}
    #CONFIGURE BOOTLOADER {{{
    configure_bootloader() {
        local messages=""
        local fonction="CONFIGURATION DE rEFInd.\n"
        fonction+="========================\n\n"
        messages="${fonction}"
        #
        if [[ $IS_MULTI_BOOT_UEFI = 0 ]]; then
            messages+="Configuration de ${NAME_DIR_EFI}/refind.conf :\n"
            messages+="- timeout --> timeout 2\n"
            messages+="- #scan_all_linux_kernels --> scan_all_linux_kernels false\n"
            messages+="- #fold_linux_kernels --> fold_linux_kernels false\n"
            if [[ $IN_VIRTUAL_BOX = 1 ]]; then
                messages+="- #showtools --> showtools shell,about,shutdown,reboot\n"
                messages+="- #dont_scan_files  --> dont_scan_files ...\n"
            else
                messages+="- #showtools --> showtools shell,about,shutdown,reboot,firmware\n"
                messages+="- #dont_scan_files  --> dont_scan_files ...\n"
                messages+="- #resolution --> resolution 1024 768\n"
            fi
        else
            messages+="!!! MULTI BOOT UEFI :\n"
            messages+="    Pas de configuration de ${NAME_DIR_EFI}/refind.conf.\n"
        fi
        whiptail --title "${TITRE_BOX_W}" --msgbox "${messages}" --ok-button "Continuer" 20 72
        # rEFInd 0.8.3 :
        # A ETUDIER
        # #scanfor internal,external,optical,manual => scanfor internal,hdbios,external,optical,manual
        # ==> Si problème CSM compatibility => à enlever
        # #uefi_deep_legacy_scan => uefi_deep_legacy_scan true
        # ==> NE PAS METTRE DANS VBOX
        if [[ $IS_MULTI_BOOT_UEFI = 0 ]]; then
            sed -i "/^timeout/c\timeout 2" ${NAME_DIR_EFI}/refind.conf
            sed -i "/^#scan_all_linux_kernels/c\scan_all_linux_kernels false" ${NAME_DIR_EFI}/refind.conf
            sed -i "/^#fold_linux_kernels/c\fold_linux_kernels false" ${NAME_DIR_EFI}/refind.conf
            if [[ $IN_VIRTUAL_BOX = 1 ]]; then
                sed -i "/^#showtools/c\showtools shell,about,shutdown,reboot" ${NAME_DIR_EFI}/refind.conf
                sed -i "/^#dont_scan_files/c\dont_scan_files fallback.efi,shim.efi,shim-fedora.efi,gcdx64.efi,MokManager.efi" ${NAME_DIR_EFI}/refind.conf
            else
                sed -i "/^#showtools/c\showtools shell,about,shutdown,reboot,firmware" ${NAME_DIR_EFI}/refind.conf
                sed -i "/^#dont_scan_files/c\dont_scan_files BOOTX64.EFI,fallback.efi,shim.efi,shim-fedora.efi,gcdx64.efi,MokManager.efi" ${NAME_DIR_EFI}/refind.conf
                sed -i "/^#resolution 1024 768/c\resolution 1024 768" ${NAME_DIR_EFI}/refind.conf
                # PAS OK : RAJOUTES ENTRÉES DS NVRAM => PLUS DE BOOT !!!
                #sed -i "/^#scanfor/c\scanfor internal,hdbios,external,optical,manual" ${NAME_DIR_EFI}/refind.conf
                # NE SEMBLE PAS OBLIGATOIRE ( PAR DEFAUT )
                #sed -i "/^#uefi_deep_legacy_scan/c\uefi_deep_legacy_scan true" ${NAME_DIR_EFI}/refind.conf
            fi
        fi
        messages="${fonction}"
        messages+="Visualiser/Editer le fichier «refind.conf» avec «"${EDITOR}"» ?\n"
        print_whiptail_yesno "${messages}" "Editer" "Continuer"
        retour=$?
        if [[ $retour = 0 ]]; then
            ${EDITOR} ${NAME_DIR_EFI}/refind.conf
        fi 
        #
        messages="${fonction}"
        messages+="Configuration de ${DIR_EFI_ARCHLINUX}/refind_linux.conf.\n"
        print_whiptail_msgbox "${messages}" "Continuer"
        partroot=$(echo $ROOT | sed 's/\/dev\///')
        partuuid=$(ls -l /dev/disk/by-partuuid | awk '/'$partroot'/ {print $9}')
        sed -i "/^\"Boot/d;/^$/d" ${DIR_EFI_ARCHLINUX}/refind_linux.conf
        # ROOT_FS_TYPE=ext4
        if [[ $IN_VIRTUAL_BOX = 1 ]]; then
            echo -e '"Boot en mode Graphique"   "root=PARTUUID='$partuuid' rootfstype='$ROOT_FS_TYPE' rw add_efi_memmap force_addr=0xaddr systemd.unit=graphical.target quiet initrd=EFI/'$NAME_DIR_ARCHLINUX'/initramfs-'$NAME_DIR_ARCHLINUX'.img"' >> ${DIR_EFI_ARCHLINUX}/refind_linux.conf
            echo -e '"Boot en mode Terminal"    "root=PARTUUID='$partuuid' rootfstype='$ROOT_FS_TYPE' rw add_efi_memmap force_addr=0xaddr systemd.unit=multi-user.target quiet initrd=EFI/'$NAME_DIR_ARCHLINUX'/initramfs-'$NAME_DIR_ARCHLINUX'.img"' >> ${DIR_EFI_ARCHLINUX}/refind_linux.conf
            echo -e '"Boot en mode Depannage"   "root=PARTUUID='$partuuid' rootfstype='$ROOT_FS_TYPE' rw add_efi_memmap force_addr=0xaddr systemd.unit=rescue.target initrd=EFI/'$NAME_DIR_ARCHLINUX'/initramfs-'$NAME_DIR_ARCHLINUX'.img"' >> ${DIR_EFI_ARCHLINUX}/refind_linux.conf
            echo -e '"Fallback en mode Graphique"   "root=PARTUUID='$partuuid' rootfstype='$ROOT_FS_TYPE' rw add_efi_memmap force_addr=0xaddr systemd.unit=graphical.target initrd=EFI/'$NAME_DIR_ARCHLINUX'/initramfs-'$NAME_DIR_ARCHLINUX'-fallback.img"' >> ${DIR_EFI_ARCHLINUX}/refind_linux.conf
            echo -e '"Fallback en mode Terminal"    "root=PARTUUID='$partuuid' rootfstype='$ROOT_FS_TYPE' rw add_efi_memmap force_addr=0xaddr systemd.unit=multi-user.target initrd=EFI/'$NAME_DIR_ARCHLINUX'/initramfs-'$NAME_DIR_ARCHLINUX'-fallback.img"' >> ${DIR_EFI_ARCHLINUX}/refind_linux.conf
            echo -e '"Fallback en mode Depannage"   "root=PARTUUID='$partuuid' rootfstype='$ROOT_FS_TYPE' rw add_efi_memmap force_addr=0xaddr systemd.unit=rescue.target initrd=EFI/'$NAME_DIR_ARCHLINUX'/initramfs-'$NAME_DIR_ARCHLINUX'-fallback.img"' >> ${DIR_EFI_ARCHLINUX}/refind_linux.conf
        else
            echo -e '"Boot en mode Graphique"   "root=PARTUUID='$partuuid' rootfstype='$ROOT_FS_TYPE' rw add_efi_memmap systemd.unit=graphical.target quiet initrd=EFI/'$NAME_DIR_ARCHLINUX'/intel-ucode.img initrd=EFI/'$NAME_DIR_ARCHLINUX'/initramfs-'$NAME_DIR_ARCHLINUX'.img"' >> ${DIR_EFI_ARCHLINUX}/refind_linux.conf
            echo -e '"Boot en mode Terminal"    "root=PARTUUID='$partuuid' rootfstype='$ROOT_FS_TYPE' rw add_efi_memmap systemd.unit=multi-user.target quiet initrd=EFI/'$NAME_DIR_ARCHLINUX'/intel-ucode.img initrd=EFI/'$NAME_DIR_ARCHLINUX'/initramfs-'$NAME_DIR_ARCHLINUX'.img"' >> ${DIR_EFI_ARCHLINUX}/refind_linux.conf
            echo -e '"Boot en mode Depannage"   "root=PARTUUID='$partuuid' rootfstype='$ROOT_FS_TYPE' rw add_efi_memmap systemd.unit=rescue.target initrd=EFI/'$NAME_DIR_ARCHLINUX'/intel-ucode.img initrd=EFI/'$NAME_DIR_ARCHLINUX'/initramfs-'$NAME_DIR_ARCHLINUX'.img"' >> ${DIR_EFI_ARCHLINUX}/refind_linux.conf
            echo -e '"Fallback en mode Graphique"   "root=PARTUUID='$partuuid' rootfstype='$ROOT_FS_TYPE' rw add_efi_memmap force_addr=0xaddr systemd.unit=graphical.target initrd=EFI/'$NAME_DIR_ARCHLINUX'/intel-ucode.img initrd=EFI/'$NAME_DIR_ARCHLINUX'/initramfs-'$NAME_DIR_ARCHLINUX'-fallback.img"' >> ${DIR_EFI_ARCHLINUX}/refind_linux.conf
            echo -e '"Fallback en mode Terminal"    "root=PARTUUID='$partuuid' rootfstype='$ROOT_FS_TYPE' rw add_efi_memmap force_addr=0xaddr systemd.unit=multi-user.target initrd=EFI/'$NAME_DIR_ARCHLINUX'/intel-ucode.img initrd=EFI/'$NAME_DIR_ARCHLINUX'/initramfs-'$NAME_DIR_ARCHLINUX'-fallback.img"' >> ${DIR_EFI_ARCHLINUX}/refind_linux.conf
            echo -e '"Fallback en mode Depannage"   "root=PARTUUID='$partuuid' rootfstype='$ROOT_FS_TYPE' rw add_efi_memmap force_addr=0xaddr systemd.unit=rescue.target initrd=EFI/'$NAME_DIR_ARCHLINUX'/intel-ucode.img initrd=EFI/'$NAME_DIR_ARCHLINUX'/initramfs-'$NAME_DIR_ARCHLINUX'-fallback.img"' >> ${DIR_EFI_ARCHLINUX}/refind_linux.conf
        fi
        messages="${fonction}"
        messages+="Visualiser/Editer le fichier «refind_linux.conf» avec «"${EDITOR}"» ?\n"
        print_whiptail_yesno "${messages}" "Editer" "Continuer"
        retour=$?
        if [[ $retour = 0 ]]; then
            ${EDITOR} ${DIR_EFI_ARCHLINUX}/refind_linux.conf
        fi  
        #
        messages="${fonction}"
        if [[ $IS_MULTI_BOOT_UEFI = 0 ]]; then
            messages+="Configuration du manager de Boot.\n"
        else
            messages+="!!! MULTI BOOT UEFI :\n"
            messages+="    Pas de configuration du manager de Boot.\n"
        fi
        print_whiptail_msgbox "${messages}" "Continuer"
        if [[ $IS_MULTI_BOOT_UEFI = 0 ]]; then
            # https://wiki.archlinux.org/index.php/Beginners%27_Guide#For_UEFI_motherboards 12/10/2013
            # Si /sys/firmware/efi/efivars n'est pas déjà monté.
            # Voir modifs  arch-install-scripts
            if [[ ! -d "/sys/firmware/efi/efivars" ]]; then
                mount -t efivarfs efivarfs /sys/firmware/efi/efivars
            fi
            # Supprime entrée rEFInd ArchLinux dans NVRAM si existe déjà
            _num_entree=$(efibootmgr -v | awk '/rEFInd/ {print $1}' | sed -e "s/^Boot//;s/\*$//")
            if [[ ${_num_entree} != "" ]]; then
                efibootmgr -B -b ${_num_entree}
            fi
            #
            numpartefi=$(echo $EFI_DEVICE | sed 's/\/dev\/sd[a-z]//')
            printf '%s\n' "${BGreen}Configuration du manager de Boot...${Reset}"
            efibootmgr -c -d ${ROOT_DEVICE} -p ${numpartefi} -l ${NAME_DIR_MGR_EFI} -L "rEFInd ArchLinux"
            messages="${fonction}"
            messages+="Visualiser les entrées dans NVRAM ?\n"
            print_whiptail_yesno "${messages}" "Visualiser" "Continuer"
            retour=$?
            if [[ $retour = 0 ]]; then
                efibootmgr -v > /tmp/.efibootmgr
                cat /tmp/.efibootmgr
                pause_function
                rm -f /tmp/.efibootmgr
            fi
        fi
        # Installation de efistub_update.path et efistub_update.service
        messages="${fonction}"
        messages+="Installation et Activation de efistub_update{.path,.service}.\n"
        print_whiptail_msgbox "${messages}" "Continuer"
        printf '%s\n' "${BGreen}Installation de «${BYellow}efistub_update.path${BGreen}» et «${BYellow}efistub_update.service${BGreen}»...${Reset}"
        cp -v ai-fconfig/efi-services/efistub_update.path /etc/systemd/system/efistub_update.path
        cp -v ai-fconfig/efi-services/efistub_update.service /etc/systemd/system/efistub_update.service
        sed -i "s/NAMEDIRARCHLINUX/${NAME_DIR_ARCHLINUX}/g" /etc/systemd/system/efistub_update.service
        printf '%s\n' "${BGreen}Activation de «${BYellow}efistub_update.path${BGreen}» et «${BYellow}efistub_update.service${BGreen}»...${Reset}"
        systemctl enable efistub_update.path
        # Installation de intel_ucode_update.path et intel_ucode_update.service
        messages="${fonction}"
        if [[ $IN_VIRTUAL_BOX = 0 ]]; then
            messages+="Installation et Activation de intel_ucode_update{.path,.service}.\n"
            print_whiptail_msgbox "${messages}" "Continuer"
            printf '%s\n' "${BGreen}Installation de «${BYellow}intel_ucode_update.path${BGreen}» et «${BYellow}intel_ucode_update.service${BGreen}»...${Reset}"
            cp -v ai-fconfig/efi-services/intel_ucode_update.path /etc/systemd/system/intel_ucode_update.path
            cp -v ai-fconfig/efi-services/intel_ucode_update.service /etc/systemd/system/intel_ucode_update.service
            sed -i "s/NAMEDIRARCHLINUX/${NAME_DIR_ARCHLINUX}/g" /etc/systemd/system/intel_ucode_update.service
            printf '%s\n' "${BGreen}Activation de «${BYellow}intel_ucode_update.path${BGreen}» et «${BYellow}intel_ucode_update.service${BGreen}»...${Reset}"
            systemctl enable intel_ucode_update.path
        else
            messages+="!!! Installation dans VirtualBox :\n"
            messages+="    PAS d'activion des mises à jour du microcode.\n"
            print_whiptail_msgbox "${messages}" "Continuer"
        fi
        #
        messages="${fonction}"
        if [[ $IS_MULTI_BOOT_UEFI = 0 ]]; then
            messages+="- Installation d'un Shell UEFI.\n"
            messages+="- Création du script «archlinux.nsh» utilisé par le Shell UEFI.\n"
        else
            messages+="!!! MULTI BOOT UEFI : Pas d'installation d'un Shell UEFI.\n"
        fi
        print_whiptail_msgbox "${messages}" "Continuer"
        if [[ $IS_MULTI_BOOT_UEFI = 0 ]]; then
            printf '%s\n' "${BGreen}Installation d'un Shell UEFI et Création du script «${BYellow}archlinux.nsh${BGreen}» utilisé par le Shell UEFI...${Reset}"
            wget https://edk2.svn.sourceforge.net/svnroot/edk2/trunk/edk2/ShellBinPkg/UefiShell/X64/Shell.efi
            # OU
            # cp -v /run/archiso/bootmnt/EFI/shellx64_v2.efi /boot/efi/shellx64.efi
            cp -v Shell.efi /boot/efi/shellx64.efi
            echo "echo -on" > /boot/efi/archlinux.nsh
            if [[ $IN_VIRTUAL_BOX = 0 ]]; then
                echo "\EFI\arch_1\vmlinuz-arch_1.efi root=PARTUUID=$partuuid rw rootfstype=$ROOT_FS_TYPE add_efi_memmap initrd=EFI/arch_1/intel-ucode.img initrd=EFI/arch_1/initramfs-arch_1.img" >> /boot/efi/archlinux.nsh
            else
                echo "\EFI\arch_1\vmlinuz-arch_1.efi root=PARTUUID=$partuuid rw rootfstype=$ROOT_FS_TYPE add_efi_memmap initrd=EFI/arch_1/initramfs-arch_1.img" >> /boot/efi/archlinux.nsh
            fi
            messages="${fonction}"
            messages+="Visualiser/Editer le script «archlinux.nsh» avec «"${EDITOR}"» ?\n"
            print_whiptail_yesno "${messages}" "Editer" "Continuer"
            retour=$?
            if [[ $retour = 0 ]]; then
               ${EDITOR} /boot/efi/archlinux.nsh
            fi  
        fi
        # RAJOUT CREATION arch_x_ck VIDE
        mkdir -p ${DIR_EFI_ARCHLINUX}_ck
#        pause_function
    }
    #}}}

